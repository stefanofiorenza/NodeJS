From: <Saved by Blink>
Snapshot-Content-Location: https://codewithhugo.com/express-request-response-mocking/
Subject: =?utf-8?Q?A=20testing=20guide=20for=20Express=20with=20request=20and=20re?=
 =?utf-8?Q?sponse=20mocking/stubbing=20using=20Jest=20or=20sinon=20=C2=B7?=
 =?utf-8?Q?=20Code=20with=20Hugo?=
Date: Tue, 15 Oct 2019 07:39:06 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----"


------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: text/html
Content-ID: <frame-5A6B4F3EE8E42F32AAA7A4858D39F23D@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://codewithhugo.com/express-request-response-mocking/

<!DOCTYPE html><html lang=3D"en-us"><head><meta http-equiv=3D"Content-Type"=
 content=3D"text/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"te=
xt/css" href=3D"cid:css-3c5e1d8a-50fb-42bb-b543-607731dd2320@mhtml.blink" /=
><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-f9628386-6ea5-4=
e31-b10e-4f822023a42b@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/=
css" href=3D"cid:css-918ab7de-a90a-48de-8e69-e049cd42e794@mhtml.blink" /><l=
ink rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-6fa6b7a1-5da3-4600=
-9e86-c0089586c902@mhtml.blink" /><meta http-equiv=3D"x-ua-compatible" cont=
ent=3D"IE=3Dedge,chrome=3D1"><meta name=3D"google-site-verification" conten=
t=3D"gBfbdXRLofaOyHsbgiSiuCIHKPaviGMRVWh_qOfDHNE"><title>A testing guide fo=
r Express with request and response mocking/stubbing using Jest or sinon =
=C2=B7 Code with Hugo</title><meta name=3D"HandheldFriendly" content=3D"Tru=
e"><meta name=3D"viewport" content=3D"width=3Ddevice-width,initial-scale=3D=
1"><link rel=3D"apple-touch-icon" sizes=3D"120x120" href=3D"https://codewit=
hhugo.com/apple-touch-icon.png"><link rel=3D"icon" type=3D"image/png" sizes=
=3D"32x32" href=3D"https://codewithhugo.com/favicon-32x32.png"><link rel=3D=
"icon" type=3D"image/png" sizes=3D"16x16" href=3D"https://codewithhugo.com/=
favicon-16x16.png"><link rel=3D"manifest" href=3D"https://codewithhugo.com/=
site.webmanifest"><link rel=3D"mask-icon" href=3D"https://codewithhugo.com/=
safari-pinned-tab.svg" color=3D"#5bbad5"><meta name=3D"msapplication-TileCo=
lor" content=3D"#00aba9"><meta name=3D"theme-color" content=3D"#090a0b"><li=
nk rel=3D"shortcut icon" href=3D"https://codewithhugo.com/favicon.ico"><met=
a name=3D"theme-color" content=3D"#090a0b"><link rel=3D"canonical" href=3D"=
https://codewithhugo.com/express-request-response-mocking/"><meta name=3D"d=
escription" content=3D"<p>To test an Express handler, it=E2=80=99s useful t=
o know how to successfully mock/stub the <code>request</code> and <code>res=
ponse</code> objects. The following examp"><meta name=3D"twitter:card" cont=
ent=3D"summary_large_image"><meta name=3D"twitter:image" content=3D"https:/=
/codewithhugo.com/express-request-response-mocking/chris-barbalis-unsplash_=
huda5eb9ff69e1b9edda476b01900fef98_108104_800x0_resize_q60_box.jpg"><meta n=
ame=3D"twitter:title" content=3D"A testing guide for Express with request a=
nd response mocking/stubbing using Jest or sinon"><meta name=3D"twitter:des=
cription" content=3D"<p>To test an Express handler, it=E2=80=99s useful to =
know how to successfully mock/stub the <code>request</code> and <code>respo=
nse</code> objects. The following examp"><meta name=3D"twitter:url" content=
=3D"https://codewithhugo.com/express-request-response-mocking"><meta name=
=3D"twitter:site" content=3D"@hugo__df"><meta property=3D"og:site_name" con=
tent=3D"Code with Hugo"><meta property=3D"og:title" content=3D"A testing gu=
ide for Express with request and response mocking/stubbing using Jest or si=
non =C2=B7 Code with Hugo"><meta property=3D"og:url" content=3D"https://cod=
ewithhugo.com/express-request-response-mocking/"><meta property=3D"og:type"=
 content=3D"article"><meta property=3D"og:description" content=3D"<p>To tes=
t an Express handler, it=E2=80=99s useful to know how to successfully mock/=
stub the <code>request</code> and <code>response</code> objects. The follow=
ing examp"><meta property=3D"article:published_time" content=3D"2019-02-18T=
00:00:00Z"><meta property=3D"article:tag" content=3D"Express"><meta propert=
y=3D"article:tag" content=3D"Node"><meta property=3D"article:tag" content=
=3D"jest"><meta property=3D"article:tag" content=3D"Testing"><meta property=
=3D"article:tag" content=3D"JavaScript"><meta property=3D"og:image" content=
=3D"https://codewithhugo.com/express-request-response-mocking/chris-barbali=
s-unsplash_huda5eb9ff69e1b9edda476b01900fef98_108104_1200x0_resize_q60_box.=
jpg"><meta name=3D"generator" content=3D"Hugo 0.54.0"><meta name=3D"msvalid=
ate.01" content=3D"AB3DF94B48DA504644F2CA389A99D5E0"></head><body class=3D"=
post-template"><div class=3D"site-wrapper"><header class=3D"site-header out=
er"><div class=3D"inner"><nav class=3D"site-nav"><div class=3D"site-nav-lef=
t"><ul class=3D"nav" role=3D"menu"><li role=3D"menuitem"><a href=3D"https:/=
/codewithhugo.com/">Home</a></li><li role=3D"menuitem"><a href=3D"https://c=
odewithhugo.com/guides/">guides</a></li><li role=3D"menuitem"><a href=3D"ht=
tps://codewithhugo.com/tags/javascript/">JavaScript</a></li><li role=3D"men=
uitem"><a href=3D"https://codewithhugo.com/tags/node/">Node</a></li><li rol=
e=3D"menuitem"><a href=3D"https://codewithhugo.com/tags/jest/">Jest</a></li=
><li role=3D"menuitem"><a href=3D"https://codewithhugo.com/about/#more-cont=
ent">More...</a></li><li role=3D"menuitem"><a href=3D"https://codewithhugo.=
com/search">Search</a></li><li role=3D"menuitem"><a href=3D"https://codewit=
hhugo.com/about/">About</a></li><li role=3D"menuitem"><a href=3D"https://co=
dewithhugo.com/uses/">Gear &amp; Setup</a></li></ul></div><div class=3D"sit=
e-nav-right"><div class=3D"social-links"><a class=3D"social-link social-lin=
k-tw" href=3D"https://twitter.com/hugo__df" target=3D"_blank" rel=3D"noopen=
er"><svg xmlns=3D"http://www.w3.org/2000/svg" viewBox=3D"0 0 32 32"><path d=
=3D"M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.188 3.125=
-.688 4.625a15.088 15.088.0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25 3.813a=
15.015 15.015.0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25.0-6.188-.875-=
8.875-2.625.438.063.875.125 1.375.125 2.688.0 5.063-.875 7.188-2.5-1.25.0-2=
.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.125.125.5=
.0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673.0 0 1-1.313-=
3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228.0 0 1-1.875-2c-.5-.875=
-.688-1.813-.688-2.75.0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.188 5.25=
 4.25s4.313 1.688 6.688 1.813a5.579 5.579.0 0 1 1.5-5.438c1.125-1.125 2.5-1=
.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48.0 0 0 3.688-1.375c-.438 =
1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z"></path></s=
vg></a><a class=3D"social-link" href=3D"https://github.com/HugoDF" target=
=3D"_blank" rel=3D"noopener"><svg xmlns=3D"http://www.w3.org/2000/svg" view=
Box=3D"0 0 24 24"><path d=3D"M12 .297c-6.63.0-12 5.373-12 12 0 5.303 3.438 =
9.8 8.205 11.385.6.113.82-.258.82-.577.0-.285-.01-1.04-.015-2.04-3.338.724-=
4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.72=
9.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.9=
98.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93.0-1.31.465-2=
.38 1.235-3.22-.135-.303-.54-1.523.105-3.176.0.0 1.005-.322 3.3 1.23.96-.26=
7 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.2=
3.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22.0 4.61-2.805 5.625=
-5.475 5.92.42.36.81 1.096.81 2.22.0 1.606-.015 2.896-.015 3.286.0.315.21.6=
9.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12"></path><=
/svg></a><a class=3D"social-link" href=3D"https://medium.com/@hugo__df" tar=
get=3D"_blank" rel=3D"noopener"><svg xmlns=3D"http://www.w3.org/2000/svg" v=
iewBox=3D"0 0 195 195"><path d=3D"M46.5340803 65.2157554C46.6968378 63.6076=
572 46.0836 62.018231 44.8828198 60.93592L32.6512605 46.2010582V44H70.63025=
21L99.9859944 108.380952 125.794585 44H162V46.2010582L151.542017 56.2281011=
C150.640424 56.9153477 150.193188 58.0448862 150.380019 59.1628454V132.8371=
55C150.193188 133.955114 150.640424 135.084652 151.542017 135.771899L161.75=
5369 145.798942V148H110.38282V145.798942L120.963119 135.527337C122.002801 1=
34.487948 122.002801 134.182246 122.002801 132.592593V73.0417402L92.585901 =
147.755438H88.6106443L54.3622782 73.0417402V123.115814C54.0767278 125.22106=
9 54.7759199 127.3406 56.2581699 128.863022L70.0186741 145.55438V147.755438=
H31V145.55438L44.7605042 128.863022C46.2319621 127.338076 46.8903838 125.20=
4485 46.5340803 123.115814V65.2157554z"></path></svg></a></div><a class=3D"=
subscribe-button" href=3D"https://codewithhugo.com/index.xml">Subscribe</a>=
</div></nav></div></header><main id=3D"site-main" class=3D"site-main outer"=
 role=3D"main"><div class=3D"inner"><article class=3D"post-full post"><asid=
e id=3D"codefund" class=3D"related-links"><div id=3D"cf"> <div class=3D"cf-=
wrapper" style=3D"max-width: 330px; display: block; font-size: 14px; line-h=
eight: 1.4; font-family: Helvetica, Arial; margin-left: auto; margin-right:=
 auto; padding: 15px;" align=3D"center"> <div class=3D"cf-header" style=3D"=
font-size: 12px; color: #678; display: block; margin-bottom: 8px;">Proudly =
sponsored by</div> <a data-href=3D"campaign_url" class=3D"cf-text" target=
=3D"_blank" rel=3D"nofollow noopener" style=3D"box-shadow: none !important;=
 color: #333; text-decoration: none;" href=3D"https://codefund.io/impressio=
ns/c9e95244-2f55-4b6b-9ef4-9b01c206285f/click?campaign_id=3D450&amp;creativ=
e_id=3D425&amp;property_id=3D146&amp;template=3Dcentered&amp;theme=3Dlight"=
> <strong>Try Buildkite!</strong> <span>Fast, secure, and scalable CI/CD fo=
r all your software projects.</span> </a> <a href=3D"https://codefund.io/in=
vite/PHYZZKbm-E8" data-target=3D"powered_by_url" class=3D"cf-powered-by" ta=
rget=3D"_blank" rel=3D"nofollow noopener" style=3D"box-shadow: none !import=
ant; margin-top: 5px; font-size: 11px; display: block; color: #678; text-de=
coration: none; text-align: center;"> <em>ethical</em> ad by CodeFund <img =
data-src=3D"impression_url" alt=3D"" style=3D"position: fixed; left: -1000p=
x; top: -1000px;" src=3D"https://codefund.io/display/c9e95244-2f55-4b6b-9ef=
4-9b01c206285f.gif"> </a> </div> </div> </aside><header class=3D"post-full-=
header"><section class=3D"post-full-meta"><time class=3D"post-full-meta-dat=
e" datetime=3D"2019-02-18">18 February 2019</time>
<span class=3D"date-divider">/</span> <a href=3D"https://codewithhugo.com/t=
ags/express/">#Express</a>&nbsp;<a href=3D"https://codewithhugo.com/tags/no=
de/">#Node</a>&nbsp;</section><h1 class=3D"post-full-title">A testing guide=
 for Express with request and response mocking/stubbing using Jest or sinon=
</h1></header><div class=3D"hero-container"><figure class=3D"post-full-imag=
e" style=3D"background-image:url(https://codewithhugo.com/express-request-r=
esponse-mocking/chris-barbalis-unsplash_huda5eb9ff69e1b9edda476b01900fef98_=
108104_0x800_resize_q60_box.jpg)"></figure></div><section class=3D"post-ful=
l-content"><div class=3D"kg-card-markdown"><p>To test an Express handler, i=
t=E2=80=99s useful to know how to successfully mock/stub the <code>request<=
/code> and <code>response</code> objects. The following examples will be wr=
itten both using Jest and sinon (running in AVA).</p><p>The rationale for t=
his is the following. Jest is a very popular =E2=80=9Call-in-one=E2=80=9D t=
esting framework. Sinon is one of the most popular =E2=80=9CStandalone test=
 spies, stubs and mocks for JavaScript=E2=80=9D which =E2=80=9Cworks with a=
ny unit testing framework=E2=80=9D.</p><p>The approach detailed in this pos=
t will be about how to test handlers independently of the Express app insta=
nce by calling them directly with mocked request (<code>req</code>) and res=
ponse (<code>res</code>) objects. This is only 1 approach to testing Expres=
s handlers and middleware. The alternative is to fire up the Express server=
 (ideally in-memory using SuperTest). I go into more detail on how to achie=
ve that in <a href=3D"https://codewithhugo.com/testing-an-express-app-with-=
supertest-moxios-and-jest/">=E2=80=9CTesting an Express app with SuperTest,=
 moxios and Jest=E2=80=9D</a>.</p><p>One of the big conceptual leaps to tes=
ting Express applications with mocked request/response is understanding how=
 to mock a chained API eg. <code>res.status(200).json({ foo: 'bar' })</code=
>.</p><p>This is achieved by returning the <code>res</code> instance from e=
ach of its methods:</p><div class=3D"highlight"><pre class=3D"chroma"><code=
 class=3D"language-js" data-lang=3D"js"><span class=3D"k">const</span> <spa=
n class=3D"nx">mockResponse</span> <span class=3D"o">=3D</span> <span class=
=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"p">{};</span>
  <span class=3D"c1">// replace the following () =3D&gt; res
</span><span class=3D"c1"></span>  <span class=3D"c1">// with your function=
 stub/mock of choice
</span><span class=3D"c1"></span>  <span class=3D"c1">// making sure they s=
till return `res`
</span><span class=3D"c1"></span>  <span class=3D"nx">res</span><span class=
=3D"p">.</span><span class=3D"nx">status</span> <span class=3D"o">=3D</span=
> <span class=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=
=3D"nx">res</span><span class=3D"p">;</span>
  <span class=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx"=
>json</span> <span class=3D"o">=3D</span> <span class=3D"p">()</span> <span=
 class=3D"p">=3D&gt;</span> <span class=3D"nx">res</span><span class=3D"p">=
;</span>
  <span class=3D"k">return</span> <span class=3D"nx">res</span><span class=
=3D"p">;</span>
<span class=3D"p">};</span>
</code></pre></div><p>See the repository with examples and the working appl=
ication at <a href=3D"https://github.com/HugoDF/mock-express-request-respon=
se">github.com/HugoDF/mock-express-request-response</a>.</p><p>Table of con=
tents:</p></div><details style=3D"cursor:pointer"><summary>Table of Content=
s</summary><nav id=3D"TableOfContents"><ul><li><ul><li><a href=3D"https://c=
odewithhugo.com/express-request-response-mocking/#stubs-and-mocks-jest-fn-v=
s-sinon">Stubs and mocks: Jest.fn vs sinon</a></li><li><a href=3D"https://c=
odewithhugo.com/express-request-response-mocking/#mocking-stubbing-a-chaine=
d-api-express-response">Mocking/stubbing a chained API: Express response</a=
><ul><li><a href=3D"https://codewithhugo.com/express-request-response-mocki=
ng/#mocking-stubbing-req-a-simple-express-request-with-jest-or-sinon">Mocki=
ng/stubbing req (a simple Express request) with Jest or sinon</a></li><li><=
a href=3D"https://codewithhugo.com/express-request-response-mocking/#mockin=
g-stubbing-res-a-simple-express-response-with-jest">Mocking/stubbing res (a=
 simple Express response) with Jest</a></li><li><a href=3D"https://codewith=
hugo.com/express-request-response-mocking/#mocking-stubbing-res-a-simple-ex=
press-response-with-sinon">Mocking/stubbing res (a simple Express response)=
 with sinon</a></li><li><a href=3D"https://codewithhugo.com/express-request=
-response-mocking/#testing-a-handler-that-reads-from-req-and-sends-a-res-us=
ing-status-and-json">Testing a handler that reads from <code>req</code> and=
 sends a <code>res</code> using status and json()</a></li><li><a href=3D"ht=
tps://codewithhugo.com/express-request-response-mocking/#testing-a-handler-=
that-writes-to-req-and-sends-a-res-using-status-and-json">Testing a handler=
 that writes to <code>req</code> and sends a <code>res</code> using status =
and json()</a></li></ul></li><li><a href=3D"https://codewithhugo.com/expres=
s-request-response-mocking/#a-complex-handler-request-response-mocking-scen=
ario-a-request-to-login-with-a-body">A complex handler request/response moc=
king scenario: a request to login with a body</a><ul><li><a href=3D"https:/=
/codewithhugo.com/express-request-response-mocking/#tests-for-login-handler=
-using-in-jest">Tests for login handler using in Jest</a></li><li><a href=
=3D"https://codewithhugo.com/express-request-response-mocking/#tests-for-lo=
gin-handler-using-ava-sinon">Tests for login handler using AVA + sinon</a><=
/li></ul></li><li><a href=3D"https://codewithhugo.com/express-request-respo=
nse-mocking/#testing-a-middleware-and-mocking-express-request-get-headers">=
Testing a middleware and mocking Express request.get headers</a><ul><li><a =
href=3D"https://codewithhugo.com/express-request-response-mocking/#updating=
-mockrequest-to-support-accessing-headers">Updating mockRequest to support =
accessing headers</a></li><li><a href=3D"https://codewithhugo.com/express-r=
equest-response-mocking/#testing-a-middleware-that-accesses-headers-with-je=
st">Testing a middleware that accesses headers with Jest</a></li><li><a hre=
f=3D"https://codewithhugo.com/express-request-response-mocking/#testing-a-m=
iddleware-that-accesses-headers-using-ava-sinon">Testing a middleware that =
accesses headers using AVA + sinon</a></li></ul></li><li><a href=3D"https:/=
/codewithhugo.com/express-request-response-mocking/#keys-to-testing-express=
-handlers-and-middleware">Keys to testing Express handlers and middleware</=
a></li></ul></li></ul></nav></details><div class=3D"kg-card-markdown"><h2 i=
d=3D"stubs-and-mocks-jest-fn-vs-sinon">Stubs and mocks: Jest.fn vs sinon</h=
2><p><code>jest.fn</code> and <code>sinon.stub</code> have the same role. T=
hey both return a mock/stub for a function. That just means a function that=
 recalls information about its calls, eg. how many times and what arguments=
 it was called with.</p><p>The Jest mock is tightly integrated with the res=
t of the framework. That means we can have assertions that look like the fo=
llowing:</p><div class=3D"highlight"><pre class=3D"chroma"><code class=3D"l=
anguage-js" data-lang=3D"js"><span class=3D"nx">test</span><span class=3D"p=
">(</span><span class=3D"s1">'jest.fn recalls what it has been called with'=
</span><span class=3D"p">,</span> <span class=3D"p">()</span> <span class=
=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">mock</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">jest</span><span class=3D"p">.</span><=
span class=3D"nx">fn</span><span class=3D"p">();</span>
  <span class=3D"nx">mock</span><span class=3D"p">(</span><span class=3D"s1=
">'a'</span><span class=3D"p">,</span> <span class=3D"s1">'b'</span><span c=
lass=3D"p">,</span> <span class=3D"s1">'c'</span><span class=3D"p">);</span=
>
  <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=3D"=
nx">mock</span><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCall=
edTimes</span><span class=3D"p">(</span><span class=3D"mi">1</span><span cl=
ass=3D"p">);</span>
  <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=3D"=
nx">mock</span><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCall=
edWith</span><span class=3D"p">(</span><span class=3D"s1">'a'</span><span c=
lass=3D"p">,</span> <span class=3D"s1">'b'</span><span class=3D"p">,</span>=
 <span class=3D"s1">'c'</span><span class=3D"p">);</span>
<span class=3D"p">});</span>
</code></pre></div><p>Sinon is =E2=80=9Cjust=E2=80=9D a spies/stubs/mocks l=
ibrary, that means we need a separate test runner, the following example is=
 equivalent to the previous Jest one but written using AVA:</p><div class=
=3D"highlight"><pre class=3D"chroma"><code class=3D"language-js" data-lang=
=3D"js"><span class=3D"k">const</span> <span class=3D"nx">test</span> <span=
 class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">=
(</span><span class=3D"s1">'ava'</span><span class=3D"p">);</span>
<span class=3D"k">const</span> <span class=3D"nx">sinon</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">(</spa=
n><span class=3D"s1">'sinon'</span><span class=3D"p">);</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'sinon.stub recalls what it has been called with'</span><span class=3D"p">,=
</span> <span class=3D"nx">t</span> <span class=3D"p">=3D&gt;</span> <span =
class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">mock</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">sinon</span><span class=3D"p">.</span>=
<span class=3D"nx">stub</span><span class=3D"p">();</span>
  <span class=3D"nx">mock</span><span class=3D"p">(</span><span class=3D"s1=
">'a'</span><span class=3D"p">,</span> <span class=3D"s1">'b'</span><span c=
lass=3D"p">,</span> <span class=3D"s1">'c'</span><span class=3D"p">);</span=
>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">mock</span><span cla=
ss=3D"p">.</span><span class=3D"nx">called</span><span class=3D"p">);</span=
>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">mock</span><span cla=
ss=3D"p">.</span><span class=3D"nx">calledWith</span><span class=3D"p">(</s=
pan><span class=3D"s1">'a'</span><span class=3D"p">,</span> <span class=3D"=
s1">'b'</span><span class=3D"p">,</span> <span class=3D"s1">'c'</span><span=
 class=3D"p">));</span>
<span class=3D"p">});</span>
</code></pre></div><h2 id=3D"mocking-stubbing-a-chained-api-express-respons=
e">Mocking/stubbing a chained API: Express response</h2><p>The Express user=
-land API is based around middleware. A middleware that takes a request (us=
ually called <code>req</code>), a response (usually called <code>res</code>=
 ) and a next (call next middleware) as parameters.</p><p>A =E2=80=9Croute =
handler=E2=80=9D is a middleware that tends not to call <code>next</code>, =
it usually results in a response being sent.</p><p>An example of some route=
 handlers are the following (in express-handlers.js).</p><p>In this example=
 <code>req.session</code> is generated by <code>client-sessions</code>, a m=
iddleware by Mozilla that sets an encrypted cookie that gets set on the cli=
ent (using a <code>Set-Cookie</code>). That=E2=80=99s beyond the scope of t=
his post. For all intents and purposes, we could be accessing/writing to an=
y other set of request/response properties.</p><div class=3D"highlight"><pr=
e class=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span class=
=3D"kr">async</span> <span class=3D"kd">function</span> <span class=3D"nx">=
logout</span><span class=3D"p">(</span><span class=3D"nx">req</span><span c=
lass=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">)</span>=
 <span class=3D"p">{</span>
  <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx"=
>session</span><span class=3D"p">.</span><span class=3D"nx">data</span> <sp=
an class=3D"o">=3D</span> <span class=3D"kc">null</span><span class=3D"p">;=
</span>
  <span class=3D"k">return</span> <span class=3D"nx">res</span><span class=
=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span><s=
pan class=3D"mi">200</span><span class=3D"p">).</span><span class=3D"nx">js=
on</span><span class=3D"p">();</span>
<span class=3D"p">}</span>
<span class=3D"kr">async</span> <span class=3D"kd">function</span> <span cl=
ass=3D"nx">checkAuth</span><span class=3D"p">(</span><span class=3D"nx">req=
</span><span class=3D"p">,</span> <span class=3D"nx">res</span><span class=
=3D"p">)</span> <span class=3D"p">{</span>
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o">!=
</span><span class=3D"nx">req</span><span class=3D"p">.</span><span class=
=3D"nx">session</span><span class=3D"p">.</span><span class=3D"nx">data</sp=
an><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span><=
span class=3D"mi">401</span><span class=3D"p">).</span><span class=3D"nx">j=
son</span><span class=3D"p">();</span>
  <span class=3D"p">}</span>
  <span class=3D"k">const</span> <span class=3D"p">{</span> <span class=3D"=
nx">username</span> <span class=3D"p">}</span> <span class=3D"o">=3D</span>=
 <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">=
session</span><span class=3D"p">.</span><span class=3D"nx">data</span><span=
 class=3D"p">;</span>
  <span class=3D"k">return</span> <span class=3D"nx">res</span><span class=
=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span><s=
pan class=3D"mi">200</span><span class=3D"p">).</span><span class=3D"nx">js=
on</span><span class=3D"p">({</span> <span class=3D"nx">username</span> <sp=
an class=3D"p">});</span>
<span class=3D"p">}</span>

<span class=3D"nx">module</span><span class=3D"p">.</span><span class=3D"nx=
">exports</span> <span class=3D"o">=3D</span> <span class=3D"p">{</span>
  <span class=3D"nx">logout</span><span class=3D"p">,</span>
  <span class=3D"nx">checkAuth</span>
<span class=3D"p">};</span>
</code></pre></div><p>They are consumed by being =E2=80=9Cmounted=E2=80=9D =
on an Express application (<code>app</code>) instance (in app.js):</p><div =
class=3D"highlight"><pre class=3D"chroma"><code class=3D"language-js" data-=
lang=3D"js"><span class=3D"k">const</span> <span class=3D"nx">express</span=
> <span class=3D"o">=3D</span> <span class=3D"nx">require</span><span class=
=3D"p">(</span><span class=3D"s1">'express'</span><span class=3D"p">);</spa=
n>
<span class=3D"k">const</span> <span class=3D"nx">app</span> <span class=3D=
"o">=3D</span> <span class=3D"nx">express</span><span class=3D"p">();</span=
>

<span class=3D"k">const</span> <span class=3D"p">{</span> <span class=3D"nx=
">logout</span><span class=3D"p">,</span> <span class=3D"nx">checkAuth</spa=
n> <span class=3D"p">}</span> <span class=3D"o">=3D</span> <span class=3D"n=
x">require</span><span class=3D"p">(</span><span class=3D"s1">'./express-ha=
ndlers.js'</span><span class=3D"p">);</span>

<span class=3D"nx">app</span><span class=3D"p">.</span><span class=3D"nx">g=
et</span><span class=3D"p">(</span><span class=3D"s1">'/session'</span><spa=
n class=3D"p">,</span> <span class=3D"nx">checkAuth</span><span class=3D"p"=
>);</span>
<span class=3D"nx">app</span><span class=3D"p">.</span><span class=3D"k">de=
lete</span><span class=3D"p">(</span><span class=3D"s1">'/session'</span><s=
pan class=3D"p">,</span> <span class=3D"nx">logout</span><span class=3D"p">=
);</span>
</code></pre></div><p>For the above code to work in an integrated manner, w=
e need to also <code>app.use</code> the <code>client-sessions</code> packag=
e like so. Note that the <code>cookieName</code> is important since it=E2=
=80=99s the property under which the session gets set on the <code>req</cod=
e> object.</p><p>We also add the <code>express.json</code> middleware (Expr=
ess 4.16+), which works like body-parser=E2=80=99s <code>.json()</code> opt=
ion ie. it parses JSON bodies and stores the output in to <code>req.body</c=
ode>.</p><div class=3D"highlight"><pre class=3D"chroma"><code class=3D"lang=
uage-js" data-lang=3D"js"><span class=3D"k">const</span> <span class=3D"nx"=
>express</span> <span class=3D"o">=3D</span> <span class=3D"nx">require</sp=
an><span class=3D"p">(</span><span class=3D"s1">'express'</span><span class=
=3D"p">);</span>
<span class=3D"k">const</span> <span class=3D"nx">app</span> <span class=3D=
"o">=3D</span> <span class=3D"nx">express</span><span class=3D"p">();</span=
>
<span class=3D"k">const</span> <span class=3D"nx">session</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">require</span><span class=3D"p">(</sp=
an><span class=3D"s1">'client-sessions'</span><span class=3D"p">);</span>

<span class=3D"nx">app</span><span class=3D"p">.</span><span class=3D"nx">u=
se</span><span class=3D"p">(</span><span class=3D"nx">express</span><span c=
lass=3D"p">.</span><span class=3D"nx">json</span><span class=3D"p">());</sp=
an>
<span class=3D"nx">app</span><span class=3D"p">.</span><span class=3D"nx">u=
se</span><span class=3D"p">(</span><span class=3D"nx">session</span><span c=
lass=3D"p">({</span>
  <span class=3D"nx">secret</span><span class=3D"o">:</span> <span class=3D=
"nx">process</span><span class=3D"p">.</span><span class=3D"nx">env</span><=
span class=3D"p">.</span><span class=3D"nx">SESSION_SECRET</span> <span cla=
ss=3D"o">||</span> <span class=3D"s1">'my-super-secret'</span><span class=
=3D"p">,</span>
  <span class=3D"nx">cookieName</span><span class=3D"o">:</span> <span clas=
s=3D"s1">'session'</span><span class=3D"p">,</span>
  <span class=3D"nx">duration</span><span class=3D"o">:</span> <span class=
=3D"mi">60</span> <span class=3D"o">*</span> <span class=3D"mi">60</span> <=
span class=3D"o">*</span> <span class=3D"mi">1000</span> <span class=3D"c1"=
>// 1 hour
</span><span class=3D"c1"></span><span class=3D"p">}));</span>

<span class=3D"k">const</span> <span class=3D"p">{</span> <span class=3D"nx=
">logout</span><span class=3D"p">,</span> <span class=3D"nx">checkAuth</spa=
n> <span class=3D"p">}</span> <span class=3D"o">=3D</span> <span class=3D"n=
x">require</span><span class=3D"p">(</span><span class=3D"s1">'./express-ha=
ndlers.js'</span><span class=3D"p">);</span>

<span class=3D"nx">app</span><span class=3D"p">.</span><span class=3D"nx">g=
et</span><span class=3D"p">(</span><span class=3D"s1">'/session'</span><spa=
n class=3D"p">,</span> <span class=3D"nx">checkAuth</span><span class=3D"p"=
>);</span>
<span class=3D"nx">app</span><span class=3D"p">.</span><span class=3D"k">de=
lete</span><span class=3D"p">(</span><span class=3D"s1">'/session'</span><s=
pan class=3D"p">,</span> <span class=3D"nx">logout</span><span class=3D"p">=
);</span>
</code></pre></div><h3 id=3D"mocking-stubbing-req-a-simple-express-request-=
with-jest-or-sinon">Mocking/stubbing req (a simple Express request) with Je=
st or sinon</h3><p>A mockRequest function needs to return a request-compati=
ble object, which is a plain JavaScript object, it could look like the foll=
owing, depending on what properties of <code>req</code> the code under test=
 is using. Our code only accesses <code>req.session.data</code>, it means i=
t=E2=80=99s expecting <code>req</code> to have a <code>session</code> prope=
rty which is an object so that it can attempt to access the <code>req.sessi=
on.data</code> property.</p><div class=3D"highlight"><pre class=3D"chroma">=
<code class=3D"language-js" data-lang=3D"js"><span class=3D"k">const</span>=
 <span class=3D"nx">mockRequest</span> <span class=3D"o">=3D</span> <span c=
lass=3D"p">(</span><span class=3D"nx">sessionData</span><span class=3D"p">)=
</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">return</span> <span class=3D"p">{</span>
    <span class=3D"nx">session</span><span class=3D"o">:</span> <span class=
=3D"p">{</span> <span class=3D"nx">data</span><span class=3D"o">:</span> <s=
pan class=3D"nx">sessionData</span> <span class=3D"p">},</span>
  <span class=3D"p">};</span>
<span class=3D"p">};</span>
</code></pre></div><p>Since the above is just dealing with data, there=E2=
=80=99s no difference between mocking it in Jest or using sinon and the tes=
t runner of your choice (Mocha, AVA, tape, Jasmine=E2=80=A6).</p><h3 id=3D"=
mocking-stubbing-res-a-simple-express-response-with-jest">Mocking/stubbing =
res (a simple Express response) with Jest</h3><p>A mockResponse function wo=
uld look like the following, our code under test only calls <code>status</c=
ode> and <code>json</code> functions. The issue we run into is that the cal=
ls are chained. This means that <code>status</code>, <code>json</code> and =
other <code>res</code> (Express response) methods return the <code>res</cod=
e> object itself.</p><p>That means that ideally our mock would behave in th=
e same way:</p><div class=3D"highlight"><pre class=3D"chroma"><code class=
=3D"language-js" data-lang=3D"js"><span class=3D"k">const</span> <span clas=
s=3D"nx">mockResponse</span> <span class=3D"o">=3D</span> <span class=3D"p"=
>()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"p">{};</span>
  <span class=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx"=
>status</span> <span class=3D"o">=3D</span> <span class=3D"nx">jest</span><=
span class=3D"p">.</span><span class=3D"nx">fn</span><span class=3D"p">().<=
/span><span class=3D"nx">mockReturnValue</span><span class=3D"p">(</span><s=
pan class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx"=
>json</span> <span class=3D"o">=3D</span> <span class=3D"nx">jest</span><sp=
an class=3D"p">.</span><span class=3D"nx">fn</span><span class=3D"p">().</s=
pan><span class=3D"nx">mockReturnValue</span><span class=3D"p">(</span><spa=
n class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"k">return</span> <span class=3D"nx">res</span><span class=
=3D"p">;</span>
<span class=3D"p">};</span>
</code></pre></div><p>We=E2=80=99re leveraging <code>jest.fn</code>=E2=80=
=99s <code>mockReturnValue</code> method to set the return value of both <c=
ode>status</code> and <code>json</code> to the mock response instance (<cod=
e>res</code>) they=E2=80=99re set on.</p><h3 id=3D"mocking-stubbing-res-a-s=
imple-express-response-with-sinon">Mocking/stubbing res (a simple Express r=
esponse) with sinon</h3><p>The sinon equivalent to the above (with a simila=
r explanation) follows. With sinon, we have to explicitly <code>require</co=
de> it since it=E2=80=99s a standalone library (ie. not injected by test fr=
ameworks).</p><p>Sinon stubs have a <code>returns</code> method which behav=
es like the <code>mockReturnValue</code> Jest mock method. It sets the retu=
rn value of the stub.</p><p>The <code>status</code> and <code>json</code> m=
ethods on our mock response instance (<code>res</code>) return the response=
 instance (<code>res</code>) itself.</p><div class=3D"highlight"><pre class=
=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span class=3D"k">=
const</span> <span class=3D"nx">sinon</span> <span class=3D"o">=3D</span> <=
span class=3D"nx">require</span><span class=3D"p">(</span><span class=3D"s1=
">'sinon'</span><span class=3D"p">);</span>

<span class=3D"k">const</span> <span class=3D"nx">mockResponse</span> <span=
 class=3D"o">=3D</span> <span class=3D"p">()</span> <span class=3D"p">=3D&g=
t;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"p">{};</span>
  <span class=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx"=
>status</span> <span class=3D"o">=3D</span> <span class=3D"nx">sinon</span>=
<span class=3D"p">.</span><span class=3D"nx">stub</span><span class=3D"p">(=
).</span><span class=3D"nx">returns</span><span class=3D"p">(</span><span c=
lass=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx"=
>json</span> <span class=3D"o">=3D</span> <span class=3D"nx">sinon</span><s=
pan class=3D"p">.</span><span class=3D"nx">stub</span><span class=3D"p">().=
</span><span class=3D"nx">returns</span><span class=3D"p">(</span><span cla=
ss=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"k">return</span> <span class=3D"nx">res</span><span class=
=3D"p">;</span>
<span class=3D"p">};</span>
</code></pre></div><h3 id=3D"testing-a-handler-that-reads-from-req-and-send=
s-a-res-using-status-and-json">Testing a handler that reads from <code>req<=
/code> and sends a <code>res</code> using status and json()</h3><p>The <cod=
e>checkAuth</code> handler reads from <code>req</code> and sends a <code>re=
s</code> using <code>status()</code> and <code>json()</code>.</p><p>It cont=
ains the following logic, if <code>session.data</code> is not set, the sess=
ion is not set, and therefore the user is not authenticated, therefore it s=
ends a <code>401 Unauthorized</code> status with an empty JSON body.
Otherwise, it reflects the part of the session contents (just the <code>use=
rname</code>) in JSON response with a 200 status code.</p><p>Here=E2=80=99s=
 the code under test (in express-handlers.js):</p><div class=3D"highlight">=
<pre class=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span cl=
ass=3D"kr">async</span> <span class=3D"kd">function</span> <span class=3D"n=
x">checkAuth</span><span class=3D"p">(</span><span class=3D"nx">req</span><=
span class=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">)<=
/span> <span class=3D"p">{</span>
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o">!=
</span><span class=3D"nx">req</span><span class=3D"p">.</span><span class=
=3D"nx">session</span><span class=3D"p">.</span><span class=3D"nx">data</sp=
an><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span><=
span class=3D"mi">401</span><span class=3D"p">).</span><span class=3D"nx">j=
son</span><span class=3D"p">();</span>
  <span class=3D"p">}</span>
  <span class=3D"k">const</span> <span class=3D"p">{</span> <span class=3D"=
nx">username</span> <span class=3D"p">}</span> <span class=3D"o">=3D</span>=
 <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">=
session</span><span class=3D"p">.</span><span class=3D"nx">data</span><span=
 class=3D"p">;</span>
  <span class=3D"k">return</span> <span class=3D"nx">res</span><span class=
=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span><s=
pan class=3D"mi">200</span><span class=3D"p">).</span><span class=3D"nx">js=
on</span><span class=3D"p">({</span> <span class=3D"nx">username</span> <sp=
an class=3D"p">});</span>
<span class=3D"p">}</span>
</code></pre></div><p>We need to test two paths: the one leading to a 401 a=
nd the other, leading to a 200.</p><p>See a snapshot of this code on GitHub=
 <a href=3D"https://github.com/HugoDF/mock-express-request-response/release=
s/tag/check-auth-tests">github.com/HugoDF/mock-express-request-response/rel=
eases/tag/check-auth-tests</a> (click on the commit sha for the diff for th=
at version change).</p><p>Using the <code>mockRequest</code> and <code>mock=
Response</code> we=E2=80=99ve defined before, we=E2=80=99ll set a request t=
hat has no session data (for 401) and does have session data containing use=
rname (for 200). Then we=E2=80=99ll check that <code>req.status</code> is c=
alled with 401 and 200 respectively. In the 200 case we=E2=80=99ll also che=
ck that <code>res.json</code> is called with the right payload (<code>{ use=
rname }</code>).</p><p>In Jest (see express-handlers.jest-test.js):</p><div=
 class=3D"highlight"><pre class=3D"chroma"><code class=3D"language-js" data=
-lang=3D"js"><span class=3D"nx">describe</span><span class=3D"p">(</span><s=
pan class=3D"s1">'checkAuth'</span><span class=3D"p">,</span> <span class=
=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span=
>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 401 if session data is not set'</span><span class=3D"p">,</span> =
<span class=3D"kr">async</span> <span class=3D"p">()</span> <span class=3D"=
p">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">checkAuth</span><spa=
n class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</spa=
n> <span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">401</span><span class=3D"p">);<=
/span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 200 with username from session if session data is set'</span><spa=
n class=3D"p">,</span> <span class=3D"kr">async</span> <span class=3D"p">()=
</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
{</span> <span class=3D"nx">username</span><span class=3D"o">:</span> <span=
 class=3D"s1">'hugo'</span> <span class=3D"p">});</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">checkAuth</span><spa=
n class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</spa=
n> <span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">200</span><span class=3D"p">);<=
/span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">json</span><=
span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><sp=
an class=3D"p">({</span> <span class=3D"nx">username</span><span class=3D"o=
">:</span> <span class=3D"s1">'hugo'</span> <span class=3D"p">});</span>
  <span class=3D"p">});</span>
<span class=3D"p">});</span>
</code></pre></div><p>The same tests using sinon + AVA (in express-handlers=
.sinon-test.js):</p><div class=3D"highlight"><pre class=3D"chroma"><code cl=
ass=3D"language-js" data-lang=3D"js"><span class=3D"nx">test</span><span cl=
ass=3D"p">(</span><span class=3D"s1">'checkAuth &gt; should 401 if session =
data is not set'</span><span class=3D"p">,</span> <span class=3D"kr">async<=
/span> <span class=3D"p">(</span><span class=3D"nx">t</span><span class=3D"=
p">)</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">()=
;</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">checkAuth</span><span =
class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span>=
 <span class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">401</span><span class=3D"p">));</span>
<span class=3D"p">});</span>

<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'checkAuth &gt; should 200 with username from session if data is set'</span=
><span class=3D"p">,</span> <span class=3D"kr">async</span> <span class=3D"=
p">(</span><span class=3D"nx">t</span><span class=3D"p">)</span> <span clas=
s=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">({=
</span> <span class=3D"nx">username</span><span class=3D"o">:</span> <span =
class=3D"s1">'hugo'</span> <span class=3D"p">});</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">checkAuth</span><span =
class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span>=
 <span class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">200</span><span class=3D"p">));</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">json</span><span class=3D"p">.</span><sp=
an class=3D"nx">calledWith</span><span class=3D"p">({</span> <span class=3D=
"nx">username</span><span class=3D"o">:</span> <span class=3D"s1">'hugo'</s=
pan> <span class=3D"p">}));</span>
<span class=3D"p">});</span>
</code></pre></div><blockquote><p>See a snapshot of this code on GitHub <a =
href=3D"https://github.com/HugoDF/mock-express-request-response/releases/ta=
g/check-auth-tests">github.com/HugoDF/mock-express-request-response/release=
s/tag/check-auth-tests</a> (click on the commit sha for the diff for that v=
ersion change).</p></blockquote><h3 id=3D"testing-a-handler-that-writes-to-=
req-and-sends-a-res-using-status-and-json">Testing a handler that writes to=
 <code>req</code> and sends a <code>res</code> using status and json()</h3>=
<p>The <code>logout</code> handler writes to req (it sets <code>req.session=
.data</code> to <code>null</code>) and sends a response using <code>res.sta=
tus</code> and <code>res.json</code>. Here=E2=80=99s the code under test.</=
p><div class=3D"highlight"><pre class=3D"chroma"><code class=3D"language-js=
" data-lang=3D"js"><span class=3D"kr">async</span> <span class=3D"kd">funct=
ion</span> <span class=3D"nx">logout</span><span class=3D"p">(</span><span =
class=3D"nx">req</span><span class=3D"p">,</span> <span class=3D"nx">res</s=
pan><span class=3D"p">)</span> <span class=3D"p">{</span>
  <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx"=
>session</span><span class=3D"p">.</span><span class=3D"nx">data</span> <sp=
an class=3D"o">=3D</span> <span class=3D"kc">null</span><span class=3D"p">;=
</span>
  <span class=3D"k">return</span> <span class=3D"nx">res</span><span class=
=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span><s=
pan class=3D"mi">200</span><span class=3D"p">).</span><span class=3D"nx">js=
on</span><span class=3D"p">();</span>
<span class=3D"p">}</span>
</code></pre></div><p>It doesn=E2=80=99t have any branching logic, but we s=
hould test that <code>session.data</code> is reset and a response is sent i=
n 2 separate tests. See a snapshot of this code on GitHub <a href=3D"https:=
//github.com/HugoDF/mock-express-request-response/releases/tag/logout-tests=
">github.com/HugoDF/mock-express-request-response/releases/tag/logout-tests=
</a> (click on the commit sha for the diff for that version change).</p><p>=
In Jest, with the <code>mockRequest</code> and <code>mockResponse</code> fu=
nctions (in express-handlers.jest-test.js):</p><div class=3D"highlight"><pr=
e class=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span class=
=3D"nx">describe</span><span class=3D"p">(</span><span class=3D"s1">'logout=
'</span><span class=3D"p">,</span> <span class=3D"p">()</span> <span class=
=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should set session.data to null'</span><span class=3D"p">,</span> <span =
class=3D"kr">async</span> <span class=3D"p">()</span> <span class=3D"p">=3D=
&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
{</span> <span class=3D"nx">username</span><span class=3D"o">:</span> <span=
 class=3D"s1">'hugo'</span> <span class=3D"p">});</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">logout</span><span c=
lass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> =
<span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">session</spa=
n><span class=3D"p">.</span><span class=3D"nx">data</span><span class=3D"p"=
>).</span><span class=3D"nx">toBeNull</span><span class=3D"p">();</span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 200'</span><span class=3D"p">,</span> <span class=3D"kr">async</s=
pan> <span class=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span cla=
ss=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
{</span> <span class=3D"nx">username</span><span class=3D"o">:</span> <span=
 class=3D"s1">'hugo'</span> <span class=3D"p">});</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">logout</span><span c=
lass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> =
<span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">200</span><span class=3D"p">);<=
/span>
  <span class=3D"p">});</span>
<span class=3D"p">});</span>
</code></pre></div><p>In AVA + sinon using mockRequest and mockResponse fun=
ctions (in express-handlers.sinon-test.js):</p><div class=3D"highlight"><pr=
e class=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span class=
=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">'logout &gt=
; should set session.data to null'</span><span class=3D"p">,</span> <span c=
lass=3D"kr">async</span> <span class=3D"p">(</span><span class=3D"nx">t</sp=
an><span class=3D"p">)</span> <span class=3D"p">=3D&gt;</span> <span class=
=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">({=
</span> <span class=3D"nx">username</span><span class=3D"o">:</span> <span =
class=3D"s1">'hugo'</span> <span class=3D"p">});</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">logout</span><span cla=
ss=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <s=
pan class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nx">i=
s</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">.</span><span class=3D"nx">session</span><span class=3D"p">.</span><=
span class=3D"nx">data</span><span class=3D"p">,</span> <span class=3D"kc">=
null</span><span class=3D"p">);</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'logout &gt; should 200'</span><span class=3D"p">,</span> <span class=3D"kr=
">async</span> <span class=3D"p">(</span><span class=3D"nx">t</span><span c=
lass=3D"p">)</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</s=
pan>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">({=
</span> <span class=3D"nx">username</span><span class=3D"o">:</span> <span =
class=3D"s1">'hugo'</span> <span class=3D"p">});</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">logout</span><span cla=
ss=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <s=
pan class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">200</span><span class=3D"p">));</span>
<span class=3D"p">});</span>
</code></pre></div><blockquote><p>See a snapshot of this code on GitHub <a =
href=3D"https://github.com/HugoDF/mock-express-request-response/releases/ta=
g/logout-tests">github.com/HugoDF/mock-express-request-response/releases/ta=
g/logout-tests</a> (click on the commit sha for the diff for that version c=
hange).</p></blockquote><h2 id=3D"a-complex-handler-request-response-mockin=
g-scenario-a-request-to-login-with-a-body">A complex handler request/respon=
se mocking scenario: a request to login with a body</h2><p>Our login handle=
r does the heaviest lifting in the application. It=E2=80=99s in <code>expre=
ss-handlers.js</code> and containts the following logic.</p><p>The login ha=
ndler first validates that the contents of <code>req.body</code> and 400s i=
f either of them are missing (this will be our first 2 tests).</p><p>The lo=
gin handler then attempts to <code>getUser</code> for the given username, i=
f there is no such user, it 401s (this will be our 3rd test).</p><p>Next th=
e login handler compares the password from the request with the hashed/salt=
ed version coming from <code>getUser</code> output, if that comparison fail=
s, it 401s (this will be our 4th test).</p><p>Finally, if the username/pass=
word are valid for a user, the login handler sets session.data to <code>{ u=
sername }</code> and sends a 201 response (this will be our 5th test).</p><=
p>The final test (that I haven=E2=80=99t implemented) that would make sense=
 is to check that the handler sends a 500 if an error occurs during its exe=
cution (eg. <code>getUser</code> throws).</p><blockquote><p>See a snapshot =
of the code on GitHub <a href=3D"https://github.com/HugoDF/mock-express-req=
uest-response/releases/tag/login-tests">github.com/HugoDF/mock-express-requ=
est-response/releases/tag/login-tests</a> (click on the commit sha for the =
diff for that version change).</p></blockquote><p>The login functions is as=
 follows, for readability=E2=80=99s sake, I=E2=80=99ve omitted <code>getUse=
r</code>. <code>getUser</code> is implemented as a hard-coded array lookup =
in any case whereas in your application it will be a database or API call o=
f some sort (unless you=E2=80=99re using oAuth).</p><div class=3D"highlight=
"><pre class=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span =
class=3D"k">const</span> <span class=3D"nx">bcrypt</span> <span class=3D"o"=
>=3D</span> <span class=3D"nx">require</span><span class=3D"p">(</span><spa=
n class=3D"s1">'bcrypt'</span><span class=3D"p">);</span>

<span class=3D"kr">async</span> <span class=3D"kd">function</span> <span cl=
ass=3D"nx">login</span><span class=3D"p">(</span><span class=3D"nx">req</sp=
an><span class=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p=
">)</span> <span class=3D"p">{</span>
  <span class=3D"k">try</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"p">{</span> <span class=
=3D"nx">username</span><span class=3D"p">,</span> <span class=3D"nx">passwo=
rd</span> <span class=3D"p">}</span> <span class=3D"o">=3D</span> <span cla=
ss=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">body</span=
><span class=3D"p">;</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o"=
>!</span><span class=3D"nx">username</span> <span class=3D"o">||</span> <sp=
an class=3D"o">!</span><span class=3D"nx">password</span><span class=3D"p">=
)</span> <span class=3D"p">{</span>
      <span class=3D"k">return</span> <span class=3D"nx">res</span><span cl=
ass=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span=
><span class=3D"mi">400</span><span class=3D"p">).</span><span class=3D"nx"=
>json</span><span class=3D"p">({</span> <span class=3D"nx">message</span><s=
pan class=3D"o">:</span> <span class=3D"s1">'username and password are requ=
ired'</span> <span class=3D"p">});</span>
    <span class=3D"p">}</span>
    <span class=3D"k">const</span> <span class=3D"nx">user</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"nx">getUser</span><span class=3D"p">(</s=
pan><span class=3D"nx">username</span><span class=3D"p">);</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o"=
>!</span><span class=3D"nx">user</span><span class=3D"p">)</span> <span cla=
ss=3D"p">{</span>
      <span class=3D"k">return</span> <span class=3D"nx">res</span><span cl=
ass=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span=
><span class=3D"mi">401</span><span class=3D"p">).</span><span class=3D"nx"=
>json</span><span class=3D"p">({</span> <span class=3D"nx">message</span><s=
pan class=3D"o">:</span> <span class=3D"s1">'No user with matching username=
'</span> <span class=3D"p">});</span>
    <span class=3D"p">}</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o"=
>!</span><span class=3D"p">(</span><span class=3D"kr">await</span> <span cl=
ass=3D"nx">bcrypt</span><span class=3D"p">.</span><span class=3D"nx">compar=
e</span><span class=3D"p">(</span><span class=3D"nx">password</span><span c=
lass=3D"p">,</span> <span class=3D"nx">user</span><span class=3D"p">.</span=
><span class=3D"nx">password</span><span class=3D"p">)))</span> <span class=
=3D"p">{</span>
      <span class=3D"k">return</span> <span class=3D"nx">res</span><span cl=
ass=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span=
><span class=3D"mi">401</span><span class=3D"p">).</span><span class=3D"nx"=
>json</span><span class=3D"p">({</span> <span class=3D"nx">message</span><s=
pan class=3D"o">:</span> <span class=3D"s1">'Wrong password'</span> <span c=
lass=3D"p">});</span>
    <span class=3D"p">}</span>
    <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"n=
x">session</span><span class=3D"p">.</span><span class=3D"nx">data</span> <=
span class=3D"o">=3D</span> <span class=3D"p">{</span> <span class=3D"nx">u=
sername</span> <span class=3D"p">};</span>
    <span class=3D"k">return</span> <span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">(</span><=
span class=3D"mi">201</span><span class=3D"p">).</span><span class=3D"nx">j=
son</span><span class=3D"p">();</span>
  <span class=3D"p">}</span> <span class=3D"k">catch</span> <span class=3D"=
p">(</span><span class=3D"nx">e</span><span class=3D"p">)</span> <span clas=
s=3D"p">{</span>
    <span class=3D"nx">console</span><span class=3D"p">.</span><span class=
=3D"nx">error</span><span class=3D"p">(</span><span class=3D"sb">`Error dur=
ing login of "</span><span class=3D"si">${</span><span class=3D"nx">req</sp=
an><span class=3D"p">.</span><span class=3D"nx">body</span><span class=3D"p=
">.</span><span class=3D"nx">username</span><span class=3D"si">}</span><spa=
n class=3D"sb">": </span><span class=3D"si">${</span><span class=3D"nx">e</=
span><span class=3D"p">.</span><span class=3D"nx">stack</span><span class=
=3D"si">}</span><span class=3D"sb">`</span><span class=3D"p">);</span>
    <span class=3D"nx">res</span><span class=3D"p">.</span><span class=3D"n=
x">status</span><span class=3D"p">(</span><span class=3D"mi">500</span><spa=
n class=3D"p">).</span><span class=3D"nx">json</span><span class=3D"p">({</=
span> <span class=3D"nx">message</span><span class=3D"o">:</span> <span cla=
ss=3D"nx">e</span><span class=3D"p">.</span><span class=3D"nx">message</spa=
n> <span class=3D"p">});</span>
  <span class=3D"p">}</span>
<span class=3D"p">}</span>
</code></pre></div><p>It=E2=80=99s consumed, by being =E2=80=9Cmounted=E2=
=80=9D on the Express app in <code>app.js</code>:</p><div class=3D"highligh=
t"><pre class=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span=
 class=3D"nx">app</span><span class=3D"p">.</span><span class=3D"nx">post</=
span><span class=3D"p">(</span><span class=3D"s1">'/session'</span><span cl=
ass=3D"p">,</span> <span class=3D"nx">login</span><span class=3D"p">);</spa=
n>
</code></pre></div><p>To be able to test the login function we need to exte=
nds the <code>mockRequest</code> function, it=E2=80=99s still returning a p=
lain JavaScript object so there is not difference between our Jest and AVA =
+ sinon version:</p><div class=3D"highlight"><pre class=3D"chroma"><code cl=
ass=3D"language-js" data-lang=3D"js"><span class=3D"k">const</span> <span c=
lass=3D"nx">mockRequest</span> <span class=3D"o">=3D</span> <span class=3D"=
p">(</span><span class=3D"nx">sessionData</span><span class=3D"p">,</span> =
<span class=3D"nx">body</span><span class=3D"p">)</span> <span class=3D"p">=
=3D&gt;</span> <span class=3D"p">({</span>
  <span class=3D"nx">session</span><span class=3D"o">:</span> <span class=
=3D"p">{</span> <span class=3D"nx">data</span><span class=3D"o">:</span> <s=
pan class=3D"nx">sessionData</span> <span class=3D"p">},</span>
  <span class=3D"nx">body</span><span class=3D"p">,</span>
<span class=3D"p">});</span>
</code></pre></div><blockquote><p>See a snapshot of the code on GitHub <a h=
ref=3D"https://github.com/HugoDF/mock-express-request-response/releases/tag=
/login-tests">github.com/HugoDF/mock-express-request-response/releases/tag/=
login-tests</a> (click on the commit sha for the diff for that version chan=
ge).</p></blockquote><h3 id=3D"tests-for-login-handler-using-in-jest">Tests=
 for login handler using in Jest</h3><blockquote><p><strong>Note:</strong> =
There=E2=80=99s a big wall of code incoming.</p><p>You can skip to the <a h=
ref=3D"https://codewithhugo.com/express-request-response-mocking/#tests-for=
-login-handler-using-ava-sinon">sinon + AVA version</a> if that=E2=80=99s w=
hat you=E2=80=99re interested in using <a href=3D"https://codewithhugo.com/=
express-request-response-mocking/#tests-for-login-handler-using-ava-sinon">=
<strong>this link</strong></a></p><p>Skip to the <a href=3D"https://codewit=
hhugo.com/express-request-response-mocking/#testing-a-middleware-and-mockin=
g-express-request-get-headers">Middleware and request.get headers</a> secti=
on using <a href=3D"https://codewithhugo.com/express-request-response-mocki=
ng/#testing-a-middleware-and-mocking-express-request-get-headers"><strong>t=
his link.</strong></a></p></blockquote><p>To test this Express handler thor=
oughly is a few more tests but fundamentally the same principles as in the =
<code>checkAuth</code> and <code>logout</code> handlers.</p><p>The tests lo=
ok like the following (in express-handlers.jest-test.js):</p><div class=3D"=
highlight"><pre class=3D"chroma"><code class=3D"language-js" data-lang=3D"j=
s"><span class=3D"nx">describe</span><span class=3D"p">(</span><span class=
=3D"s1">'login'</span><span class=3D"p">,</span> <span class=3D"p">()</span=
> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 400 if username is missing from body'</span><span class=3D"p">,</=
span> <span class=3D"kr">async</span> <span class=3D"p">()</span> <span cla=
ss=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span>
      <span class=3D"p">{},</span>
      <span class=3D"p">{</span> <span class=3D"nx">password</span><span cl=
ass=3D"o">:</span> <span class=3D"s1">'boss'</span> <span class=3D"p">}</sp=
an>
    <span class=3D"p">);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">login</span><span cl=
ass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <=
span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">400</span><span class=3D"p">);<=
/span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">json</span><=
span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><sp=
an class=3D"p">({</span>
      <span class=3D"nx">message</span><span class=3D"o">:</span> <span cla=
ss=3D"s1">'username and password are required'</span>
    <span class=3D"p">});</span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 400 if password is missing from body'</span><span class=3D"p">,</=
span> <span class=3D"kr">async</span> <span class=3D"p">()</span> <span cla=
ss=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span>
      <span class=3D"p">{},</span>
      <span class=3D"p">{</span> <span class=3D"nx">username</span><span cl=
ass=3D"o">:</span> <span class=3D"s1">'hugo'</span> <span class=3D"p">}</sp=
an>
    <span class=3D"p">);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">login</span><span cl=
ass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <=
span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">400</span><span class=3D"p">);<=
/span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">json</span><=
span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><sp=
an class=3D"p">({</span>
      <span class=3D"nx">message</span><span class=3D"o">:</span> <span cla=
ss=3D"s1">'username and password are required'</span>
    <span class=3D"p">});</span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 401 with message if user with passed username does not exist'</sp=
an><span class=3D"p">,</span> <span class=3D"kr">async</span> <span class=
=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span=
>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span>
      <span class=3D"p">{},</span>
      <span class=3D"p">{</span>
        <span class=3D"nx">username</span><span class=3D"o">:</span> <span =
class=3D"s1">'hugo-boss'</span><span class=3D"p">,</span>
        <span class=3D"nx">password</span><span class=3D"o">:</span> <span =
class=3D"s1">'boss'</span>
      <span class=3D"p">}</span>
    <span class=3D"p">);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">login</span><span cl=
ass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <=
span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">401</span><span class=3D"p">);<=
/span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">json</span><=
span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><sp=
an class=3D"p">({</span>
      <span class=3D"nx">message</span><span class=3D"o">:</span> <span cla=
ss=3D"s1">'No user with matching username'</span>
    <span class=3D"p">});</span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 401 with message if passed password does not match stored passwor=
d'</span><span class=3D"p">,</span> <span class=3D"kr">async</span> <span c=
lass=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</=
span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span>
      <span class=3D"p">{},</span>
      <span class=3D"p">{</span>
        <span class=3D"nx">username</span><span class=3D"o">:</span> <span =
class=3D"s1">'guest'</span><span class=3D"p">,</span>
        <span class=3D"nx">password</span><span class=3D"o">:</span> <span =
class=3D"s1">'not-good-password'</span>
      <span class=3D"p">}</span>
    <span class=3D"p">);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">login</span><span cl=
ass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <=
span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">401</span><span class=3D"p">);<=
/span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">json</span><=
span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><sp=
an class=3D"p">({</span>
      <span class=3D"nx">message</span><span class=3D"o">:</span> <span cla=
ss=3D"s1">'Wrong password'</span>
    <span class=3D"p">});</span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should 201 and set session.data with username if user exists and right p=
assword provided'</span><span class=3D"p">,</span> <span class=3D"kr">async=
</span> <span class=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span =
class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span>
      <span class=3D"p">{},</span>
      <span class=3D"p">{</span>
        <span class=3D"nx">username</span><span class=3D"o">:</span> <span =
class=3D"s1">'guest'</span><span class=3D"p">,</span>
        <span class=3D"nx">password</span><span class=3D"o">:</span> <span =
class=3D"s1">'guest-boss'</span>
      <span class=3D"p">}</span>
    <span class=3D"p">);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">login</span><span cl=
ass=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <=
span class=3D"nx">res</span><span class=3D"p">);</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">status</span=
><span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalledWith</span><=
span class=3D"p">(</span><span class=3D"mi">201</span><span class=3D"p">);<=
/span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">res</span><span class=3D"p">.</span><span class=3D"nx">json</span><=
span class=3D"p">).</span><span class=3D"nx">toHaveBeenCalled</span><span c=
lass=3D"p">();</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">session</spa=
n><span class=3D"p">.</span><span class=3D"nx">data</span><span class=3D"p"=
>).</span><span class=3D"nx">toEqual</span><span class=3D"p">({</span>
      <span class=3D"nx">username</span><span class=3D"o">:</span> <span cl=
ass=3D"s1">'guest'</span><span class=3D"p">,</span>
    <span class=3D"p">});</span>
  <span class=3D"p">});</span>
<span class=3D"p">});</span>
</code></pre></div><blockquote><p>See a snapshot of the code on GitHub <a h=
ref=3D"https://github.com/HugoDF/mock-express-request-response/releases/tag=
/login-tests">github.com/HugoDF/mock-express-request-response/releases/tag/=
login-tests</a> (click on the commit sha for the diff for that version chan=
ge).</p></blockquote><h3 id=3D"tests-for-login-handler-using-ava-sinon">Tes=
ts for login handler using AVA + sinon</h3><blockquote><p><strong>Note:</st=
rong> There=E2=80=99s (another) big wall of code incoming.</p><p>You can go=
 back to the <a href=3D"https://codewithhugo.com/express-request-response-m=
ocking/#tests-for-login-handler-using-in-jest">Jest version</a> if that=E2=
=80=99s what you=E2=80=99re interested in using <a href=3D"http://localhost=
:1313/express-request-response-mocking/#tests-for-login-handler-using-in-je=
st"><strong>this link</strong></a></p><p>Skip to the <a href=3D"https://cod=
ewithhugo.com/express-request-response-mocking/#testing-a-middleware-and-mo=
cking-express-request-get-headers">Middleware and request.get headers</a> s=
ection using <a href=3D"https://codewithhugo.com/express-request-response-m=
ocking/#testing-a-middleware-and-mocking-express-request-get-headers"><stro=
ng>this link.</strong></a></p></blockquote><p>Again there=E2=80=99s nothing=
 fundamentally new in these tests, they=E2=80=99re just denser and closer t=
o what you would do in a real-world application, they are as follows (in ex=
press-handlers.sinon-test.js):</p><blockquote><p>See a snapshot of the code=
 on GitHub <a href=3D"https://github.com/HugoDF/mock-express-request-respon=
se/releases/tag/login-tests">github.com/HugoDF/mock-express-request-respons=
e/releases/tag/login-tests</a> (click on the commit sha for the diff for th=
at version change).</p></blockquote><div class=3D"highlight"><pre class=3D"=
chroma"><code class=3D"language-js" data-lang=3D"js"><span class=3D"nx">tes=
t</span><span class=3D"p">(</span><span class=3D"s1">'login &gt; should 400=
 if username is missing from body'</span><span class=3D"p">,</span> <span c=
lass=3D"kr">async</span> <span class=3D"p">(</span><span class=3D"nx">t</sp=
an><span class=3D"p">)</span> <span class=3D"p">=3D&gt;</span> <span class=
=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span>
    <span class=3D"p">{},</span>
    <span class=3D"p">{</span> <span class=3D"nx">password</span><span clas=
s=3D"o">:</span> <span class=3D"s1">'boss'</span> <span class=3D"p">}</span=
>
  <span class=3D"p">);</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">login</span><span clas=
s=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <sp=
an class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">400</span><span class=3D"p">));</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">json</span><span class=3D"p">.</span><sp=
an class=3D"nx">calledWith</span><span class=3D"p">({</span>
    <span class=3D"nx">message</span><span class=3D"o">:</span> <span class=
=3D"s1">'username and password are required'</span>
  <span class=3D"p">}));</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'should 400 if password is missing from body'</span><span class=3D"p">,</sp=
an> <span class=3D"kr">async</span> <span class=3D"p">(</span><span class=
=3D"nx">t</span><span class=3D"p">)</span> <span class=3D"p">=3D&gt;</span>=
 <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span>
    <span class=3D"p">{},</span>
    <span class=3D"p">{</span> <span class=3D"nx">username</span><span clas=
s=3D"o">:</span> <span class=3D"s1">'hugo'</span> <span class=3D"p">}</span=
>
  <span class=3D"p">);</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">login</span><span clas=
s=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <sp=
an class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">400</span><span class=3D"p">));</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">json</span><span class=3D"p">.</span><sp=
an class=3D"nx">calledWith</span><span class=3D"p">({</span>
    <span class=3D"nx">message</span><span class=3D"o">:</span> <span class=
=3D"s1">'username and password are required'</span>
  <span class=3D"p">}));</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'should 401 with message if user with passed username does not exist'</span=
><span class=3D"p">,</span> <span class=3D"kr">async</span> <span class=3D"=
p">(</span><span class=3D"nx">t</span><span class=3D"p">)</span> <span clas=
s=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span>
    <span class=3D"p">{},</span>
    <span class=3D"p">{</span>
      <span class=3D"nx">username</span><span class=3D"o">:</span> <span cl=
ass=3D"s1">'hugo-boss'</span><span class=3D"p">,</span>
      <span class=3D"nx">password</span><span class=3D"o">:</span> <span cl=
ass=3D"s1">'boss'</span>
    <span class=3D"p">}</span>
  <span class=3D"p">);</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">login</span><span clas=
s=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <sp=
an class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">401</span><span class=3D"p">));</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">json</span><span class=3D"p">.</span><sp=
an class=3D"nx">calledWith</span><span class=3D"p">({</span>
    <span class=3D"nx">message</span><span class=3D"o">:</span> <span class=
=3D"s1">'No user with matching username'</span>
  <span class=3D"p">}));</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'should 401 with message if passed password does not match stored password'=
</span><span class=3D"p">,</span> <span class=3D"kr">async</span> <span cla=
ss=3D"p">(</span><span class=3D"nx">t</span><span class=3D"p">)</span> <spa=
n class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span>
    <span class=3D"p">{},</span>
    <span class=3D"p">{</span>
      <span class=3D"nx">username</span><span class=3D"o">:</span> <span cl=
ass=3D"s1">'guest'</span><span class=3D"p">,</span>
      <span class=3D"nx">password</span><span class=3D"o">:</span> <span cl=
ass=3D"s1">'not-good-password'</span>
    <span class=3D"p">}</span>
  <span class=3D"p">);</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">login</span><span clas=
s=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <sp=
an class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">401</span><span class=3D"p">));</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">json</span><span class=3D"p">.</span><sp=
an class=3D"nx">calledWith</span><span class=3D"p">({</span>
    <span class=3D"nx">message</span><span class=3D"o">:</span> <span class=
=3D"s1">'Wrong password'</span>
  <span class=3D"p">}));</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'should 201 and set session.data with username if user exists and right pas=
sword provided'</span><span class=3D"p">,</span> <span class=3D"kr">async</=
span> <span class=3D"p">(</span><span class=3D"nx">t</span><span class=3D"p=
">)</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span>
    <span class=3D"p">{},</span>
    <span class=3D"p">{</span>
      <span class=3D"nx">username</span><span class=3D"o">:</span> <span cl=
ass=3D"s1">'guest'</span><span class=3D"p">,</span>
      <span class=3D"nx">password</span><span class=3D"o">:</span> <span cl=
ass=3D"s1">'guest-boss'</span>
    <span class=3D"p">}</span>
  <span class=3D"p">);</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">login</span><span clas=
s=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <sp=
an class=3D"nx">res</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">status</span><span class=3D"p">.</span><=
span class=3D"nx">calledWith</span><span class=3D"p">(</span><span class=3D=
"mi">201</span><span class=3D"p">));</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"kc">t=
rue</span><span class=3D"p">(</span><span class=3D"nx">res</span><span clas=
s=3D"p">.</span><span class=3D"nx">json</span><span class=3D"p">.</span><sp=
an class=3D"nx">called</span><span class=3D"p">);</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nx">d=
eepEqual</span><span class=3D"p">(</span>
    <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"n=
x">session</span><span class=3D"p">.</span><span class=3D"nx">data</span><s=
pan class=3D"p">,</span>
    <span class=3D"p">{</span> <span class=3D"nx">username</span><span clas=
s=3D"o">:</span> <span class=3D"s1">'guest'</span> <span class=3D"p">}</spa=
n>
  <span class=3D"p">);</span>
<span class=3D"p">});</span>
</code></pre></div><blockquote><p>See a snapshot of the code on GitHub <a h=
ref=3D"https://github.com/HugoDF/mock-express-request-response/releases/tag=
/login-tests">github.com/HugoDF/mock-express-request-response/releases/tag/=
login-tests</a> (click on the commit sha for the diff for that version chan=
ge).</p></blockquote><h2 id=3D"testing-a-middleware-and-mocking-express-req=
uest-get-headers">Testing a middleware and mocking Express request.get head=
ers</h2><p>Another scenario in which you might want to mock/stub the Expres=
s request and response objects is when testing a middleware function.</p><p=
>Testing middleware is subtly different. A lot of middleware has conditions=
 under which it does nothing (just calls <code>next()</code>). An Express m=
iddleware should always call <code>next()</code> (its 3rd parameter) or sen=
d a response.</p><p>Here=E2=80=99s an example middleware which allows authe=
ntication using an API key in an <code>Authorization</code> header of the f=
ormat <code>Bearer {API_KEY}</code>.</p><p>Beyond the middleware vs handler=
 differences, <code>headerAuth</code> is also using <code>req.get()</code>,=
 which is used to get headers from the Express request.</p><p>I=E2=80=99ve =
omitted <code>apiKeyToUser</code> and <code>isApiKey</code>. <code>apiKeyTo=
User</code> is just a lookup from apiKeys to usernames. In a real-world app=
lication this would be a database lookup much like what would replace <code=
>getUser</code> in the <code>login</code> code.</p><div class=3D"highlight"=
><pre class=3D"chroma"><code class=3D"language-js" data-lang=3D"js"><span c=
lass=3D"kd">function</span> <span class=3D"nx">headerAuth</span><span class=
=3D"p">(</span><span class=3D"nx">req</span><span class=3D"p">,</span> <spa=
n class=3D"nx">res</span><span class=3D"p">,</span> <span class=3D"nx">next=
</span><span class=3D"p">)</span> <span class=3D"p">{</span>
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"nx">=
req</span><span class=3D"p">.</span><span class=3D"nx">session</span><span =
class=3D"p">.</span><span class=3D"nx">data</span><span class=3D"p">)</span=
> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"nx">next</span><span cla=
ss=3D"p">()</span>
  <span class=3D"p">}</span>
  <span class=3D"k">const</span> <span class=3D"nx">authenticationHeader</s=
pan> <span class=3D"o">=3D</span> <span class=3D"nx">req</span><span class=
=3D"p">.</span><span class=3D"nx">get</span><span class=3D"p">(</span><span=
 class=3D"s1">'authorization'</span><span class=3D"p">)</span>
  <span class=3D"k">if</span><span class=3D"p">(</span><span class=3D"o">!<=
/span><span class=3D"nx">authenticationHeader</span><span class=3D"p">)</sp=
an> <span class=3D"p">{</span>
    <span class=3D"k">return</span> <span class=3D"nx">next</span><span cla=
ss=3D"p">()</span>
  <span class=3D"p">}</span>
  <span class=3D"k">const</span> <span class=3D"nx">apiKey</span> <span cla=
ss=3D"o">=3D</span> <span class=3D"nx">authenticationHeader</span>
    <span class=3D"p">.</span><span class=3D"nx">replace</span><span class=
=3D"p">(</span><span class=3D"s1">'Bearer'</span><span class=3D"p">,</span>=
 <span class=3D"s1">''</span><span class=3D"p">)</span>
    <span class=3D"p">.</span><span class=3D"nx">trim</span><span class=3D"=
p">();</span>
  <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"o">!=
</span><span class=3D"nx">isApiKey</span><span class=3D"p">(</span><span cl=
ass=3D"nx">apiKey</span><span class=3D"p">))</span> <span class=3D"p">{</sp=
an>
    <span class=3D"k">return</span> <span class=3D"nx">next</span><span cla=
ss=3D"p">()</span>
  <span class=3D"p">}</span>
  <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx"=
>session</span><span class=3D"p">.</span><span class=3D"nx">data</span> <sp=
an class=3D"o">=3D</span> <span class=3D"p">{</span> <span class=3D"nx">use=
rname</span><span class=3D"o">:</span> <span class=3D"nx">apiKeyToUser</spa=
n><span class=3D"p">[</span><span class=3D"nx">apiKey</span><span class=3D"=
p">]</span> <span class=3D"p">};</span>
  <span class=3D"nx">next</span><span class=3D"p">();</span>
<span class=3D"p">}</span>
</code></pre></div><blockquote><p>See a snapshot of the code on GitHub <a h=
ref=3D"https://github.com/HugoDF/mock-express-request-response/releases/tag=
/middleware-header-tests">github.com/HugoDF/mock-express-request-response/r=
eleases/tag/middleware-header-tests</a> (click on the commit sha for the di=
ff for that version change).</p></blockquote><h3 id=3D"updating-mockrequest=
-to-support-accessing-headers">Updating mockRequest to support accessing he=
aders</h3><p>Here is a different version of mockRequest, it=E2=80=99s still=
 a plain JavaScript object, and it mock <code>req.get</code> just enough to=
 get the tests passing:</p><div class=3D"highlight"><pre class=3D"chroma"><=
code class=3D"language-js" data-lang=3D"js"><span class=3D"k">const</span> =
<span class=3D"nx">mockRequest</span> <span class=3D"o">=3D</span> <span cl=
ass=3D"p">(</span><span class=3D"nx">authHeader</span><span class=3D"p">,</=
span> <span class=3D"nx">sessionData</span><span class=3D"p">)</span> <span=
 class=3D"p">=3D&gt;</span> <span class=3D"p">({</span>
  <span class=3D"nx">get</span><span class=3D"p">(</span><span class=3D"nx"=
>name</span><span class=3D"p">)</span> <span class=3D"p">{</span>
    <span class=3D"k">if</span> <span class=3D"p">(</span><span class=3D"nx=
">name</span> <span class=3D"o">=3D=3D=3D</span> <span class=3D"s1">'author=
ization'</span><span class=3D"p">)</span> <span class=3D"k">return</span> <=
span class=3D"nx">authHeader</span>
    <span class=3D"k">return</span> <span class=3D"kc">null</span>
  <span class=3D"p">},</span>
  <span class=3D"nx">session</span><span class=3D"o">:</span> <span class=
=3D"p">{</span> <span class=3D"nx">data</span><span class=3D"o">:</span> <s=
pan class=3D"nx">sessionData</span> <span class=3D"p">}</span>
<span class=3D"p">});</span>
</code></pre></div><h3 id=3D"testing-a-middleware-that-accesses-headers-wit=
h-jest">Testing a middleware that accesses headers with Jest</h3><p>Most of=
 the tests check that nothing changes on the session while the middleware e=
xecutes since it has a lot of short-circuit conditions.</p><p>Note how we p=
ass a no-op function <code>() =3D&gt; {}</code> as the 3rd parameter (which=
 is <code>next</code>).</p><div class=3D"highlight"><pre class=3D"chroma"><=
code class=3D"language-js" data-lang=3D"js"><span class=3D"nx">describe</sp=
an><span class=3D"p">(</span><span class=3D"s1">'headerAuthMiddleware'</spa=
n><span class=3D"p">,</span> <span class=3D"p">()</span> <span class=3D"p">=
=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should set req.session.data if API key is in authorization and is valid'=
</span><span class=3D"p">,</span> <span class=3D"kr">async</span> <span cla=
ss=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</sp=
an>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span><span class=3D"s1">'76b1e728-1c14-43f9-aa06-6de5cbc064c2'</span><spa=
n class=3D"p">);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware=
</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <sp=
an class=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p"=
>{});</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">session</spa=
n><span class=3D"p">.</span><span class=3D"nx">data</span><span class=3D"p"=
>).</span><span class=3D"nx">toEqual</span><span class=3D"p">({</span> <spa=
n class=3D"nx">username</span><span class=3D"o">:</span> <span class=3D"s1"=
>'hugo'</span> <span class=3D"p">});</span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should not do anything if req.session.data is already set'</span><span c=
lass=3D"p">,</span> <span class=3D"kr">async</span> <span class=3D"p">()</s=
pan> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span><span class=3D"s1">'76b1e728-1c14-43f9-aa06-6de5cbc064c2'</span><spa=
n class=3D"p">,</span> <span class=3D"p">{</span> <span class=3D"nx">userna=
me</span><span class=3D"o">:</span> <span class=3D"s1">'guest'</span> <span=
 class=3D"p">});</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware=
</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <sp=
an class=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p"=
>{});</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">session</spa=
n><span class=3D"p">.</span><span class=3D"nx">data</span><span class=3D"p"=
>).</span><span class=3D"nx">toEqual</span><span class=3D"p">({</span> <spa=
n class=3D"nx">username</span><span class=3D"o">:</span> <span class=3D"s1"=
>'guest'</span> <span class=3D"p">});</span>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should not do anything if authorization header is not present'</span><sp=
an class=3D"p">,</span> <span class=3D"kr">async</span> <span class=3D"p">(=
)</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span><span class=3D"kc">undefined</span><span class=3D"p">);</span>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware=
</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <sp=
an class=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p"=
>{});</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">session</spa=
n><span class=3D"p">.</span><span class=3D"nx">data</span><span class=3D"p"=
>).</span><span class=3D"nx">toBeUndefined</span><span class=3D"p">();</spa=
n>
  <span class=3D"p">});</span>
  <span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1=
">'should not do anything if api key is invalid'</span><span class=3D"p">,<=
/span> <span class=3D"kr">async</span> <span class=3D"p">()</span> <span cl=
ass=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
    <span class=3D"k">const</span> <span class=3D"nx">req</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(=
</span><span class=3D"s1">'invalid-api-key'</span><span class=3D"p">);</spa=
n>
    <span class=3D"k">const</span> <span class=3D"nx">res</span> <span clas=
s=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">=
();</span>
    <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware=
</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <sp=
an class=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p"=
>{});</span>
    <span class=3D"nx">expect</span><span class=3D"p">(</span><span class=
=3D"nx">req</span><span class=3D"p">.</span><span class=3D"nx">session</spa=
n><span class=3D"p">.</span><span class=3D"nx">data</span><span class=3D"p"=
>).</span><span class=3D"nx">toBeUndefined</span><span class=3D"p">();</spa=
n>
  <span class=3D"p">});</span>
<span class=3D"p">});</span>
</code></pre></div><blockquote><p>See a snapshot of the code on GitHub <a h=
ref=3D"https://github.com/HugoDF/mock-express-request-response/releases/tag=
/middleware-header-tests">github.com/HugoDF/mock-express-request-response/r=
eleases/tag/middleware-header-tests</a> (click on the commit sha for the di=
ff for that version change).</p></blockquote><h3 id=3D"testing-a-middleware=
-that-accesses-headers-using-ava-sinon">Testing a middleware that accesses =
headers using AVA + sinon</h3><p>Most of the tests check that nothing chang=
es on the session while the middleware executes since it has a lot of short=
-circuit conditions.</p><p>Note how we pass a no-op function <code>() =3D&g=
t; {}</code> as the 3rd parameter (which is <code>next</code>).</p><div cla=
ss=3D"highlight"><pre class=3D"chroma"><code class=3D"language-js" data-lan=
g=3D"js"><span class=3D"nx">test</span><span class=3D"p">(</span><span clas=
s=3D"s1">'should set req.session.data if API key is in authorization and is=
 valid'</span><span class=3D"p">,</span> <span class=3D"kr">async</span> <s=
pan class=3D"p">(</span><span class=3D"nx">t</span><span class=3D"p">)</spa=
n> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span><span class=3D"s1">'76b1e728-1c14-43f9-aa06-6de5cbc064c2'</span><span=
 class=3D"p">);</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware</=
span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"=
p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <span c=
lass=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{})=
;</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nx">d=
eepEqual</span><span class=3D"p">(</span>
    <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"n=
x">session</span><span class=3D"p">.</span><span class=3D"nx">data</span><s=
pan class=3D"p">,</span>
    <span class=3D"p">{</span> <span class=3D"nx">username</span><span clas=
s=3D"o">:</span> <span class=3D"s1">'hugo'</span> <span class=3D"p">}</span=
>
  <span class=3D"p">);</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'should not do anything if req.session.data is already set'</span><span cla=
ss=3D"p">,</span> <span class=3D"kr">async</span> <span class=3D"p">(</span=
><span class=3D"nx">t</span><span class=3D"p">)</span> <span class=3D"p">=
=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span><span class=3D"s1">'76b1e728-1c14-43f9-aa06-6de5cbc064c2'</span><span=
 class=3D"p">,</span> <span class=3D"p">{</span> <span class=3D"nx">usernam=
e</span><span class=3D"o">:</span> <span class=3D"s1">'guest'</span> <span =
class=3D"p">});</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware</=
span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"=
p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <span c=
lass=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{})=
;</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nx">d=
eepEqual</span><span class=3D"p">(</span>
    <span class=3D"nx">req</span><span class=3D"p">.</span><span class=3D"n=
x">session</span><span class=3D"p">.</span><span class=3D"nx">data</span><s=
pan class=3D"p">,</span>
    <span class=3D"p">{</span> <span class=3D"nx">username</span><span clas=
s=3D"o">:</span> <span class=3D"s1">'guest'</span> <span class=3D"p">}</spa=
n>
  <span class=3D"p">);</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'should not do anything if authorization header is not present'</span><span=
 class=3D"p">,</span> <span class=3D"kr">async</span> <span class=3D"p">(</=
span><span class=3D"nx">t</span><span class=3D"p">)</span> <span class=3D"p=
">=3D&gt;</span> <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span><span class=3D"kc">undefined</span><span class=3D"p">);</span>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware</=
span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"=
p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <span c=
lass=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{})=
;</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nx">i=
s</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">.</span><span class=3D"nx">session</span><span class=3D"p">.</span><=
span class=3D"nx">data</span><span class=3D"p">,</span> <span class=3D"kc">=
undefined</span><span class=3D"p">);</span>
<span class=3D"p">});</span>
<span class=3D"nx">test</span><span class=3D"p">(</span><span class=3D"s1">=
'should not do anything if api key is invalid'</span><span class=3D"p">,</s=
pan> <span class=3D"kr">async</span> <span class=3D"p">(</span><span class=
=3D"nx">t</span><span class=3D"p">)</span> <span class=3D"p">=3D&gt;</span>=
 <span class=3D"p">{</span>
  <span class=3D"k">const</span> <span class=3D"nx">req</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockRequest</span><span class=3D"p">(<=
/span><span class=3D"s1">'invalid-api-key'</span><span class=3D"p">);</span=
>
  <span class=3D"k">const</span> <span class=3D"nx">res</span> <span class=
=3D"o">=3D</span> <span class=3D"nx">mockResponse</span><span class=3D"p">(=
);</span>
  <span class=3D"kr">await</span> <span class=3D"nx">headerAuthMiddleware</=
span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=3D"=
p">,</span> <span class=3D"nx">res</span><span class=3D"p">,</span> <span c=
lass=3D"p">()</span> <span class=3D"p">=3D&gt;</span> <span class=3D"p">{})=
;</span>
  <span class=3D"nx">t</span><span class=3D"p">.</span><span class=3D"nx">i=
s</span><span class=3D"p">(</span><span class=3D"nx">req</span><span class=
=3D"p">.</span><span class=3D"nx">session</span><span class=3D"p">.</span><=
span class=3D"nx">data</span><span class=3D"p">,</span> <span class=3D"kc">=
undefined</span><span class=3D"p">);</span>
<span class=3D"p">});</span>
</code></pre></div><blockquote><p>See a snapshot of the code on GitHub <a h=
ref=3D"https://github.com/HugoDF/mock-express-request-response/releases/tag=
/middleware-header-tests">github.com/HugoDF/mock-express-request-response/r=
eleases/tag/middleware-header-tests</a> (click on the commit sha for the di=
ff for that version change).</p></blockquote><h2 id=3D"keys-to-testing-expr=
ess-handlers-and-middleware">Keys to testing Express handlers and middlewar=
e</h2><p>There are a few keys to testing Express effectively in the manner =
outlined in this post.</p><p>First of all is understanding what the code do=
es. It=E2=80=99s harder than it seems. Testing in JavaScript is a lot about=
 understanding JavaScript, a bit about testing tools and a bit understandin=
g the tools used in that application under test. In order to mock the tool=
=E2=80=99s return values with the right type of data.</p><p>All the tests i=
n the post boil down to understanding what <code>req</code>, <code>res</cod=
e> and <code>next</code> are (an object, an object and a function). Which p=
roperties they have/can have, how those properties are used and whether the=
y=E2=80=99re a function or an object.</p><p>This is only 1 approach to test=
ing Express handlers and middleware. The alternative is to fire up the Expr=
ess server (ideally in-memory using SuperTest). I go into more detail on ho=
w to achieve that in <a href=3D"https://codewithhugo.com/testing-an-express=
-app-with-supertest-moxios-and-jest/">=E2=80=9CTesting an Express app with =
SuperTest, moxios and Jest=E2=80=9D</a></p><p><a style=3D"background-color:=
#000;color:#fff;text-decoration:none;padding:4px 6px;font-family:-apple-sys=
tem,BlinkMacSystemFont,&quot;san Francisco&quot;, &quot;helvetica Neue&quot=
;, Helvetica, Ubuntu, Roboto, Noto, &quot;segoe UI&quot;, Arial, sans-serif=
;font-size:12px;font-weight:700;line-height:1.2;display:inline-block;border=
-radius:3px" href=3D"https://unsplash.com/@cbarbalis?utm_medium=3Dreferral&=
amp;utm_campaign=3Dphotographer-credit&amp;utm_content=3DcreditBadge" targe=
t=3D"_blank" rel=3D"noopener noreferrer" title=3D"Download free do whatever=
 you want high-resolution photos from Chris Barbalis"><span style=3D"displa=
y:inline-block;padding:2px 3px"><svg xmlns=3D"http://www.w3.org/2000/svg" s=
tyle=3D"height:12px;width:auto;position:relative;vertical-align:middle;top:=
-2px;fill:#fff" viewBox=3D"0 0 32 32"><title>unsplash-logo</title><path d=
=3D"M10 9V0h12v9H10zm12 5h10v18H0V14h10v9h12v-9z"></path></svg></span><span=
 style=3D"display:inline-block;padding:2px 3px">Chris Barbalis</span></a></=
p></div></section><section class=3D"subscribe-form"><h3 class=3D"subscribe-=
form-title">Get Testing Superpowers with these Underused Jest Features</h3>=
<p>Subscribe for free resources that turbocharge your Jest tests and a disc=
ount on the "Advanced Jest Handbook"</p><form action=3D"https://buttondown.=
email/api/emails/embed-subscribe/hugo" method=3D"post" target=3D"popupwindo=
w"><div class=3D"form-group"><input class=3D"subscribe-email" type=3D"email=
" name=3D"email" id=3D"bd-email" placeholder=3D"youremail@example.com">
</div><button class=3D"js-cta" data-cta-event=3D"newsletter_form" value=3D"=
Subscribe" type=3D"submit">Learn Jest</button></form></section><section cla=
ss=3D"triplebyte-cta"><p class=3D"cta-text">Looking for a new job? Take Tri=
plebyte=E2=80=99s <a href=3D"https://triplebyte.com/a/XRbO1AU/d">quiz</a> a=
nd have top tech companies pitch you!</p></section><footer class=3D"post-fu=
ll-footer"><section class=3D"author-card"><img class=3D"author-profile-imag=
e" src=3D"https://codewithhugo.com/img/hugo_small.jpeg" alt=3D"Author"><sec=
tion class=3D"author-card-content"><h4 class=3D"author-card-name"><a href=
=3D"https://codewithhugo.com/">Hugo Di Francesco</a></h4><p>A Software Engi=
neer who is big on Node.js, queues and Vue(s). Co-author of "Professional J=
avaScript" with Packt. He shares practical JavaScript tips for the develope=
r who wants to get things done on Code with Hugo. University College London=
 (UCL), MEng Mathematical Computation Graduate.</p></section></section></fo=
oter></article><section class=3D"overlay-cta"><div class=3D"overlay-cta__in=
ner"><div class=3D"overlay-cta__text-container"><h3 class=3D"cta-title over=
lay-cta__title">Get Testing Superpowers with these Underused Jest Features<=
/h3><p class=3D"cta-text overlay-cta__text">Subscribe for free resources th=
at turbocharge your Jest tests and a discount on the "Advanced Jest Handboo=
k"</p></div><div class=3D"overlay-cta__button-container"><a href=3D"https:/=
/buttondown.email/hugo" class=3D"button overlay-cta__button js-cta" data-ct=
a-event=3D"newsletter_cta">Learn Jest</a>
<a href=3D"https://codewithhugo.com/express-request-response-mocking/#" cla=
ss=3D"overlay-cta__close">close</a></div></div></section></div></main><asid=
e class=3D"read-next outer"><div class=3D"inner"><div class=3D"read-next-fe=
ed"><article class=3D"read-next-card" style=3D"background-image:url(https:/=
/codewithhugo.com/img/cover.jpg)"><header class=3D"read-next-card-header"><=
small class=3D"read-next-card-header-sitetitle">=E2=80=94 Code with Hugo =
=E2=80=94</small><h3 class=3D"read-next-card-header-title"><a href=3D"https=
://codewithhugo.com/tags/express/">#Express</a></h3></header><div class=3D"=
read-next-divider"><svg xmlns=3D"http://www.w3.org/2000/svg" viewBox=3D"0 0=
 24 24"><path d=3D"M13 14.5s2 3 5 3 5.5-2.463 5.5-5.5S21 6.5 18 6.5c-5 0-7 =
11-12 11C2.962 17.5.5 15.037.5 12S3 6.5 6 6.5s4.5 3.5 4.5 3.5"></path></svg=
></div><div class=3D"read-next-card-content"><ul><li><a href=3D"https://cod=
ewithhugo.com/a-tiny-case-study-about-migrating-to-netlify-when-disaster-st=
rikes-at-github-featuring-cloudflare/">A tiny case study about migrating to=
 Netlify when disaster strikes at GitHub, featuring Cloudflare</a></li><li>=
<a href=3D"https://codewithhugo.com/simple-zeit-micro-improve-node/">Simple=
, but not too simple: how using Zeit=E2=80=99s `micro` improves your Node a=
pplications</a></li><li><a href=3D"https://codewithhugo.com/abusing-jest-sn=
apshot-tests-some-nice-use-cases-/">When to use Jest snapshot tests: compre=
hensive use-cases and examples =F0=9F=93=B8</a></li><li><a href=3D"https://=
codewithhugo.com/bring-redux-to-your-queue-logic-an-express-setup-with-es6-=
and-bull-queue/">Bring Redux to your queue logic: an Express setup with ES6=
 and bull queue</a></li></ul></div><footer class=3D"read-next-card-footer">=
<a href=3D"https://codewithhugo.com/tags/express/">See all related posts =
=E2=86=92</a></footer></article><article class=3D"post-card post"><a class=
=3D"post-card-image-link" href=3D"https://codewithhugo.com/pass-cookies-axi=
os-fetch-requests/"><div class=3D"post-card-image" style=3D"background-imag=
e:url(https://codewithhugo.com/pass-cookies-axios-fetch-requests/alex-unspl=
ash_huc118a935d8013616420a3353ab43826e_114600_0x300_resize_q60_box.jpg)"></=
div></a><div class=3D"post-card-content"><a class=3D"post-card-content-link=
" href=3D"https://codewithhugo.com/pass-cookies-axios-fetch-requests/"><hea=
der class=3D"post-card-header"><span class=3D"post-card-tags">#JavaScript
#fetch</span><h2 class=3D"post-card-title">Pass cookies with axios or fetch=
 requests</h2></header><section class=3D"post-card-excerpt"><p>When sending=
 requests from client-side JavaScript, by default cookies are not passed.
By default, fetch won=E2=80=99t send or receive any cookies from the server=
, resulting in unauthenticated requests https://developer.mozilla.org/en-US=
/docs/Web/API/Fetch_API/Using_Fetch
Two JavaScript HTTP clients I use are axios, a =E2=80=9CPromise based HTTP =
client for the browser and Node.js=E2=80=9D and the fetch API (see Fetch AP=
I on MDN).
...</p></section></a><footer class=3D"post-card-meta"><img class=3D"author-=
profile-image" src=3D"https://codewithhugo.com/img/hugo_small.jpeg" alt=3D"=
Author">
<span class=3D"post-card-author"><a href=3D"https://codewithhugo.com/">Hugo=
 Di Francesco</a></span></footer></div></article><article class=3D"post-car=
d post"><a class=3D"post-card-image-link" href=3D"https://codewithhugo.com/=
node-configuration-management/"><div class=3D"post-card-image" style=3D"bac=
kground-image:url(https://codewithhugo.com/node-configuration-management/fi=
lip-gielda-unsplash_huc6ba2a253794871ed1bc569882313321_185234_0x300_resize_=
q60_box.jpg)"></div></a><div class=3D"post-card-content"><a class=3D"post-c=
ard-content-link" href=3D"https://codewithhugo.com/node-configuration-manag=
ement/"><header class=3D"post-card-header"><span class=3D"post-card-tags">#=
Express
#Node
#JavaScript
#deployment</span><h2 class=3D"post-card-title">Node.js configuration manag=
ement without config or dotenv</h2></header><section class=3D"post-card-exc=
erpt"><p>The config npm package is great (npmjs.com/package/config), but it=
 encourages confusing and non-12-factor-app-compliant patterns.
We=E2=80=99ll look at some of the patterns it encourages and why they=E2=80=
=99ll bring you struggles down the road as well a simple, single-file, no-d=
ependency way to define your configuration.
...</p></section></a><footer class=3D"post-card-meta"><img class=3D"author-=
profile-image" src=3D"https://codewithhugo.com/img/hugo_small.jpeg" alt=3D"=
Author">
<span class=3D"post-card-author"><a href=3D"https://codewithhugo.com/">Hugo=
 Di Francesco</a></span></footer></div></article></div></div></aside><div c=
lass=3D"floating-header floating-active"><div class=3D"floating-header-logo=
"><a href=3D"https://codewithhugo.com/"><span>Code with Hugo</span></a></di=
v><span class=3D"floating-header-divider">=E2=80=94</span><div class=3D"flo=
ating-header-title">A testing guide for Express with request and response m=
ocking/stubbing using Jest or sinon</div><div class=3D"floating-header-shar=
e"><div class=3D"floating-header-share-label">Share this<svg xmlns=3D"http:=
//www.w3.org/2000/svg" viewBox=3D"0 0 24 24"><path d=3D"M7.5 15.5V4a1.5 1.5=
.0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5.0 0 1 1.5 1.5v3.0=
99c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a=
1.2 1.2.0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2"></path></svg></d=
iv><a class=3D"floating-header-share-tw" href=3D"https://twitter.com/share?=
text=3D%22A%20testing%20guide%20for%20Express%20with%20request%20and%20resp=
onse%20mocking%2fstubbing%20using%20Jest%20or%20sinon%22%20by%20%40hugo__df=
&amp;url=3Dhttps%3a%2f%2fcodewithhugo.com%2fexpress-request-response-mockin=
g%2f&amp;"><svg xmlns=3D"http://www.w3.org/2000/svg" viewBox=3D"0 0 32 32">=
<path d=3D"M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.18=
8 3.125-.688 4.625a15.088 15.088.0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25=
 3.813a15.015 15.015.0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25.0-6.18=
8-.875-8.875-2.625.438.063.875.125 1.375.125 2.688.0 5.063-.875 7.188-2.5-1=
.25.0-2.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.12=
5.125.5.0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673.0 0 1=
-1.313-3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228.0 0 1-1.875-2c-=
.5-.875-.688-1.813-.688-2.75.0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.1=
88 5.25 4.25s4.313 1.688 6.688 1.813a5.579 5.579.0 0 1 1.5-5.438c1.125-1.12=
5 2.5-1.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48.0 0 0 3.688-1.375=
c-.438 1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z"></p=
ath></svg></a><a class=3D"floating-header-share-fb" href=3D"https://www.fac=
ebook.com/sharer/sharer.php?u=3Dhttps%3a%2f%2fcodewithhugo.com%2fexpress-re=
quest-response-mocking%2f"><svg xmlns=3D"http://www.w3.org/2000/svg" viewBo=
x=3D"0 0 32 32"><path d=3D"M19 6h5V0h-5c-3.86.0-7 3.14-7 7v3H8v6h4v16h6V16h=
5l1-6h-6V7c0-.542.458-1 1-1z"></path></svg></a></div><progress class=3D"pro=
gress" value=3D"4200" max=3D"23405"><div class=3D"progress-container"><span=
 class=3D"progress-bar"></span></div></progress></div><footer class=3D"site=
-footer outer"><div class=3D"site-footer-content inner"><section class=3D"c=
opyright" style=3D"line-height:1.3em"><a href=3D"https://codewithhugo.com/"=
>Code with Hugo</a><br></section><nav class=3D"site-footer-nav"><a href=3D"=
https://codewithhugo.com/">Latest Posts</a>
<a href=3D"https://twitter.com/hugo__df" target=3D"_blank" rel=3D"noopener"=
>Twitter</a>
<a href=3D"https://github.com/HugoDF" target=3D"_blank" rel=3D"noopener">Gi=
thub</a>
<a href=3D"https://medium.com/@hugo__df" target=3D"_blank" rel=3D"noopener"=
>Medium</a></nav></div></footer></div></body></html>
------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-3c5e1d8a-50fb-42bb-b543-607731dd2320@mhtml.blink

@charset "utf-8";

a, abbr, acronym, address, applet, article, aside, audio, big, blockquote, =
body, canvas, caption, cite, code, dd, del, details, dfn, div, dl, dt, em, =
embed, fieldset, figcaption, figure, footer, form, h1, h2, h3, h4, h5, h6, =
header, hgroup, html, iframe, img, ins, kbd, label, legend, li, mark, menu,=
 nav, object, ol, output, p, pre, q, ruby, s, samp, section, small, span, s=
trike, strong, sub, summary, sup, table, tbody, td, tfoot, th, thead, time,=
 tr, tt, ul, var, video { margin: 0px; padding: 0px; border: 0px; font-styl=
e: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inhe=
rit; line-height: inherit; font-family: inherit; font-size: 100%; vertical-=
align: baseline; }

body { line-height: 1; }

ol, ul { list-style: none; }

blockquote, q { quotes: none; }

blockquote::after, blockquote::before, q::after, q::before { content: none;=
 }

img { max-width: 100%; }

html { box-sizing: border-box; font-family: sans-serif; text-size-adjust: 1=
00%; }

*, ::after, ::before { box-sizing: inherit; }

a { background-color: transparent; }

a:active, a:hover { outline: 0px; }

b, strong { font-weight: 700; }

dfn, em, i { font-style: italic; }

h1 { margin: 0.67em 0px; font-size: 2em; }

small { font-size: 80%; }

sub, sup { position: relative; font-size: 75%; line-height: 0; vertical-ali=
gn: baseline; }

sup { top: -0.5em; }

sub { bottom: -0.25em; }

img { border: 0px; }

svg:not(:root) { overflow: hidden; }

mark { background-color: rgb(253, 255, 182); }

code, kbd, pre, samp { font-family: monospace, monospace; font-size: 1em; }

button, input, optgroup, select, textarea { margin: 0px; color: inherit; fo=
nt: inherit; }

button { overflow: visible; border: none; }

button, select { text-transform: none; }

button, html input[type=3D"button"], input[type=3D"reset"], input[type=3D"s=
ubmit"] { cursor: pointer; -webkit-appearance: button; }

button[disabled], html input[disabled] { cursor: default; }

input { line-height: normal; }

input:focus { outline: none; }

input[type=3D"checkbox"], input[type=3D"radio"] { box-sizing: border-box; p=
adding: 0px; }

input[type=3D"number"]::-webkit-inner-spin-button, input[type=3D"number"]::=
-webkit-outer-spin-button { height: auto; }

input[type=3D"search"] { box-sizing: content-box; -webkit-appearance: textf=
ield; }

input[type=3D"search"]::-webkit-search-cancel-button, input[type=3D"search"=
]::-webkit-search-decoration { -webkit-appearance: none; }

legend { padding: 0px; border: 0px; }

textarea { overflow: auto; }

table { border-spacing: 0px; border-collapse: collapse; }

td, th { padding: 0px; }

html { overflow-y: scroll; font-size: 62.5%; -webkit-tap-highlight-color: r=
gba(0, 0, 0, 0); }

body, html { overflow-x: hidden; }

body { color: rgb(60, 72, 78); font-family: -apple-system, BlinkMacSystemFo=
nt, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica =
Neue", sans-serif; font-size: 1.5rem; line-height: 1.6em; font-weight: 400;=
 font-style: normal; letter-spacing: 0px; text-rendering: optimizelegibilit=
y; background: rgb(255, 255, 255); -webkit-font-smoothing: antialiased; }

::selection { text-shadow: none; background: rgb(203, 234, 251); }

hr { position: relative; display: block; width: 100%; margin: 2.5em 0px 3.5=
em; padding: 0px; height: 1px; border-width: 1px 0px 0px; border-right-styl=
e: initial; border-bottom-style: initial; border-left-style: initial; borde=
r-right-color: initial; border-bottom-color: initial; border-left-color: in=
itial; border-image: initial; border-top-style: solid; border-top-color: rg=
b(227, 233, 237); }

audio, canvas, iframe, img, svg, video { vertical-align: middle; }

fieldset { margin: 0px; padding: 0px; border: 0px; }

textarea { resize: vertical; }

blockquote, dl, ol, p, ul { margin: 0px 0px 1.5em; }

ol, ul { padding-left: 1.3em; padding-right: 1.5em; }

ol ol, ol ul, ul ol, ul ul { margin: 0.5em 0px 1em; }

ul { list-style: disc; }

ol { list-style: decimal; }

li { margin: 0.5em 0px; padding-left: 0.3em; line-height: 1.6em; }

dt { float: left; margin: 0px 20px 0px 0px; width: 120px; color: rgb(21, 23=
, 26); font-weight: 500; text-align: right; }

dd { margin: 0px 0px 5px; text-align: left; }

blockquote { margin: 1.5em 0px; padding: 0px 1.6em; border-left: 0.5em soli=
d rgb(229, 239, 245); }

blockquote p { margin: 0.8em 0px; font-size: 1.2em; font-weight: 300; }

blockquote small { display: inline-block; margin: 0.8em 0px 0.8em 1.5em; fo=
nt-size: 0.9em; opacity: 0.8; }

blockquote small::before { content: "=E2=80=94=C2=A0"; }

blockquote cite { font-weight: 700; }

blockquote cite a { font-weight: 400; }

a { color: rgb(38, 168, 237); text-decoration: none; }

a:hover { text-decoration: underline; }

h1, h2, h3, h4, h5, h6 { margin-top: 0px; line-height: 1.15; font-weight: 7=
00; text-rendering: optimizelegibility; }

h1 { margin: 0px 0px 0.5em; font-size: 5rem; font-weight: 700; }

@media (max-width: 500px) {
  h1 { font-size: 2.2rem; }
}

h2 { margin: 1.5em 0px 0.5em; font-size: 2rem; }

@media (max-width: 500px) {
  h2 { font-size: 1.8rem; }
}

h3 { margin: 1.5em 0px 0.5em; font-size: 1.8rem; font-weight: 500; }

@media (max-width: 500px) {
  h3 { font-size: 1.7rem; }
}

h4 { margin: 1.5em 0px 0.5em; font-size: 1.6rem; font-weight: 500; }

h5, h6 { margin: 1.5em 0px 0.5em; font-size: 1.4rem; font-weight: 500; }

body { background: rgb(244, 248, 251); }

.img { display: block; width: 100%; height: 100%; background-position: 50% =
center; background-size: cover; border-radius: 100%; }

.hidden { visibility: hidden; position: absolute; text-indent: -9999px; }

.site-wrapper { display: flex; flex-direction: column; min-height: 100vh; }

.site-main { z-index: 100; flex-grow: 1; }

.outer { position: relative; padding: 0px 4vw; }

.inner { margin: 0px auto; max-width: 1040px; width: 100%; }

@media (min-width: 900px) {
  .author-template .post-feed, .home-template .post-feed, .tag-template .po=
st-feed { margin-top: -70px; padding-top: 0px; }
  .home-template .site-nav { position: relative; top: -70px; }
}

.site-header { position: relative; padding-top: 12px; padding-bottom: 12px;=
 color: rgb(255, 255, 255); background: 50% center / cover no-repeat rgb(9,=
 10, 11); }

.site-header::before { bottom: 0px; background: rgba(0, 0, 0, 0.18); }

.site-header::after, .site-header::before { content: ""; position: absolute=
; top: 0px; right: 0px; left: 0px; z-index: 10; display: block; }

.site-header::after { bottom: auto; height: 80px; background: linear-gradie=
nt(rgba(0, 0, 0, 0.1), transparent); }

.site-header.no-cover::after, .site-header.no-cover::before { display: none=
; }

.site-header-content { display: flex; flex-direction: column; justify-conte=
nt: center; align-items: center; padding: 10vw 4vw; min-height: 200px; max-=
height: 450px; text-align: center; }

.site-title { z-index: 10; margin: 0px; padding: 0px; font-size: 3.8rem; fo=
nt-weight: 700; }

.site-logo { max-height: 45px; }

.site-description { z-index: 10; margin: 0px; padding: 5px 0px; font-size: =
2.2rem; font-weight: 300; letter-spacing: 0.5px; opacity: 0.8; }

@media (max-width: 500px) {
  .site-title { font-size: 3rem; }
  .site-description { font-size: 1.8rem; }
}

.site-nav { position: relative; z-index: 300; justify-content: space-betwee=
n; align-items: flex-start; height: 40px; font-size: 1.2rem; }

.site-nav, .site-nav-left { display: flex; overflow-y: hidden; }

.site-nav-left { align-items: center; overflow-x: auto; margin-right: 10px;=
 padding-bottom: 80px; letter-spacing: 0.4px; white-space: nowrap; }

.site-nav-logo { flex-shrink: 0; display: block; margin-right: 24px; paddin=
g: 11px 0px; color: rgb(255, 255, 255); font-size: 1.7rem; line-height: 1em=
; font-weight: 700; letter-spacing: -0.5px; }

.site-nav-logo:hover { text-decoration: none; }

.site-nav-logo img { display: block; width: auto; height: 21px; }

.nav { display: flex; margin: 0px 0px 0px -12px; padding: 0px; list-style: =
none; }

.nav li { padding: 0px; text-transform: uppercase; }

.nav li, .nav li a { display: block; margin: 0px; }

.nav li a { padding: 10px 12px; color: rgb(255, 255, 255); opacity: 0.8; }

.nav li a:hover { text-decoration: none; opacity: 1; }

.site-nav-right { height: 40px; }

.site-nav-right, .social-links { flex-shrink: 0; display: flex; align-items=
: center; }

.social-links a:last-of-type { padding-right: 20px; }

.social-link { display: flex; justify-content: center; align-items: center;=
 margin: 0px; padding: 10px; color: rgb(255, 255, 255); opacity: 0.8; }

.social-link:hover { opacity: 1; }

.social-link svg { height: 1.8rem; fill: rgb(255, 255, 255); }

.social-link-fb svg { height: 1.5rem; }

.social-link-wb svg { height: 1.6rem; }

.social-link-wb svg path { stroke: rgb(255, 255, 255); }

.social-link-rss svg { height: 1.9rem; }

.subscribe-button { display: block; padding: 4px 10px; border: 1px solid rg=
b(255, 255, 255); color: rgb(255, 255, 255); font-size: 1.2rem; line-height=
: 1em; border-radius: 10px; opacity: 0.8; }

.subscribe-button:hover { text-decoration: none; opacity: 1; }

.rss-button { opacity: 0.8; }

.rss-button:hover { opacity: 1; }

.rss-button svg { margin-bottom: 1px; height: 2.1rem; fill: rgb(255, 255, 2=
55); }

@media (max-width: 700px) {
  .site-header { padding-right: 0px; padding-left: 0px; }
  .site-nav-left { margin-right: 0px; padding-left: 4vw; }
  .site-nav-right { display: none; }
}

.post-feed { position: relative; flex-wrap: wrap; margin: 0px -20px; paddin=
g: 40px 0px 0px; }

.post-card, .post-feed { display: flex; }

.post-card { flex: 1 1 300px; flex-direction: column; overflow: hidden; mar=
gin: 0px 20px 40px; min-height: 300px; background: 50% center / cover rgb(2=
55, 255, 255); border-radius: 5px; box-shadow: rgba(39, 44, 49, 0.06) 8px 1=
4px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px; transition: all 0.5s ease 0s;=
 }

.post-card:hover { box-shadow: rgba(39, 44, 49, 0.1) 0px 0px 1px, rgba(39, =
44, 49, 0.07) 0px 3px 16px; transition: all 0.3s ease 0s; transform: transl=
ate3d(0px, -1px, 0px); }

.post-card-image-link { position: relative; display: block; overflow: hidde=
n; border-radius: 5px 5px 0px 0px; }

.post-card-image { width: auto; height: 200px; background: 50% center / cov=
er no-repeat rgb(197, 210, 217); }

.post-card-content-link { position: relative; display: block; padding: 25px=
 25px 0px; color: rgb(21, 23, 26); }

.post-card-content-link:hover { text-decoration: none; }

.post-card-tags { display: block; margin-bottom: 4px; color: rgb(115, 138, =
148); font-size: 1.2rem; line-height: 1.15em; font-weight: 500; letter-spac=
ing: 0.5px; text-transform: uppercase; }

.post-card-title { margin-top: 0px; }

.post-card-content { flex-grow: 1; display: flex; flex-direction: column; j=
ustify-content: space-between; }

.post-card-excerpt { font-family: Georgia, serif; }

.post-card-meta { padding: 0px 25px 25px; }

.author-profile-image { margin-right: 5px; width: 25px; height: 25px; borde=
r-radius: 100%; object-fit: cover; }

.post-card-author { font-size: 1.3rem; font-weight: 500; letter-spacing: 0.=
5px; text-transform: uppercase; }

@media (min-width: 795px) {
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) { fle=
x: 1 1 100%; flex-direction: row; }
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) .post=
-card-image-link { position: relative; flex: 1 1 auto; border-radius: 5px 0=
px 0px 5px; }
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) .post=
-card-image { position: absolute; width: 100%; height: 100%; }
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) .post=
-card-content { flex: 0 1 357px; }
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) h2 { =
font-size: 2.6rem; }
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) p { f=
ont-size: 1.8rem; line-height: 1.55em; }
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) .post=
-card-content-link { padding: 30px 40px 0px; }
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) .post=
-card-meta { padding: 0px 40px 30px; }
}

.home-template .site-header::after { display: none; }

@media (max-width: 650px) {
  .post-feed { padding-top: 5vw; }
  .post-card { margin: 0px 20px 5vw; }
}

.page-template .site-main, .post-template .site-main { padding-bottom: 4vw;=
 background: rgb(255, 255, 255); }

.post-full { position: relative; z-index: 50; }

.post-full-header { margin: 0px auto; padding: 6vw 3vw 3vw; max-width: 1040=
px; text-align: center; }

@media (max-width: 500px) {
  .post-full-header { padding: 14vw 3vw 10vw; }
}

.post-full-meta { display: flex; justify-content: center; align-items: cent=
er; color: rgb(115, 138, 148); font-size: 1.4rem; font-weight: 600; text-tr=
ansform: uppercase; }

.post-full-meta-date { color: rgb(62, 176, 239); }

.post-full-title { margin: 0px; color: rgb(9, 10, 11); }

.date-divider { display: inline-block; margin: 0px 6px 1px; }

.post-full-image { margin: 0px -10vw -165px; height: 800px; background: 50%=
 center / cover rgb(197, 210, 217); border-radius: 5px; }

@media (max-width: 1170px) {
  .post-full-image { margin: 0px -4vw -100px; height: 600px; border-radius:=
 0px; }
}

@media (max-width: 800px) {
  .post-full-image { height: 400px; }
}

.post-full-content { position: relative; margin: 0px auto; padding: 70px 10=
0px 0px; min-height: 230px; font-family: Georgia, serif; font-size: 2.2rem;=
 line-height: 1.6em; background: rgb(255, 255, 255); }

@media (max-width: 1170px) {
  .post-full-content { padding: 5vw 7vw 0px; }
}

@media (max-width: 800px) {
  .post-full-content { font-size: 1.9rem; }
}

.post-full-content::before { left: -5px; transform: rotate(-5deg); }

.post-full-content::after, .post-full-content::before { content: ""; positi=
on: absolute; top: 15px; z-index: -1; display: block; width: 20px; height: =
200px; background: rgba(39, 44, 49, 0.15); filter: blur(5px); }

.post-full-content::after { right: -5px; transform: rotate(5deg); }

.no-image .post-full-content { padding-top: 0px; }

.no-image .post-full-content::after, .no-image .post-full-content::before {=
 display: none; }

.kg-card-markdown { display: flex; flex-direction: column; align-items: cen=
ter; max-width: 920px; }

.footnotes, .post-full-comments, .post-full-content blockquote, .post-full-=
content dl, .post-full-content h1, .post-full-content h2, .post-full-conten=
t h3, .post-full-content h4, .post-full-content h5, .post-full-content h6, =
.post-full-content ol, .post-full-content p, .post-full-content pre, .post-=
full-content ul { min-width: 100%; }

.post-full-content li { word-break: break-word; }

.post-full-content li p { margin: 0px; }

.post-template .kg-card-markdown > p:first-child { font-size: 1.25em; line-=
height: 1.5em; }

.post-full-content a { color: rgb(0, 0, 0); box-shadow: rgb(62, 176, 239) 0=
px -1px 0px inset; }

.post-full-content a:hover { color: rgb(62, 176, 239); text-decoration: non=
e; }

.post-full-content em, .post-full-content strong { color: rgb(9, 10, 11); }

.post-full-content small { display: inline-block; line-height: 1.6em; }

.post-full-content li:first-child { margin-top: 0px; }

.post-full-content img, .post-full-content video { display: block; margin: =
1.5em auto; max-width: 1040px; }

@media (max-width: 1040px) {
  .post-full-content img, .post-full-content video { width: 100%; }
}

.post-full-content img[src$=3D"#full"] { max-width: none; width: 100vw; }

.post-full-content img + br + small { display: block; margin-top: -3em; mar=
gin-bottom: 1.5em; }

.post-full-content iframe { margin: 0px auto; }

.post-full-content blockquote { margin: 0px 0px 1.5em; padding: 0px 1.5em; =
border-left: 3px solid rgb(62, 176, 239); }

.post-full-content blockquote p { margin: 0px 0px 1em; color: inherit; font=
-size: inherit; line-height: inherit; font-style: italic; }

.post-full-content blockquote p:last-child { margin-bottom: 0px; }

.post-full-content code { padding: 0px 5px 2px; font-size: 0.8em; line-heig=
ht: 1em; background: rgb(229, 239, 245); border-radius: 3px; font-weight: 4=
00 !important; }

.post-full-content pre { overflow-x: auto; margin: 1.5em 0px 3em; padding: =
20px; max-width: 100%; border: 1px solid rgb(0, 0, 0); color: rgb(229, 239,=
 245); font-size: 1.4rem; line-height: 1.5em; background: rgb(14, 15, 17); =
border-radius: 5px; }

.post-full-content pre code { padding: 0px; font-size: inherit; line-height=
: inherit; background: transparent; }

.post-full-content pre code * { color: inherit; }

.post-full-content .fluid-width-video-wrapper { margin: 1.5em 0px 3em; }

.post-full-content hr { margin: 4vw 0px; }

.post-full-content hr::after { content: ""; position: absolute; top: -15px;=
 left: 50%; display: block; margin-left: -10px; width: 1px; height: 30px; b=
ackground: rgb(227, 233, 237); box-shadow: rgb(255, 255, 255) 0px 0px 0px 5=
px; transform: rotate(45deg); }

.post-full-content h1, .post-full-content h2, .post-full-content h3, .post-=
full-content h4, .post-full-content h5, .post-full-content h6 { color: rgb(=
9, 10, 11); font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Rob=
oto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif; =
}

.post-full-content h1 { margin: 0.5em 0px 0.2em; font-size: 4.6rem; font-we=
ight: 700; }

@media (max-width: 500px) {
  .post-full-content h1 { font-size: 2.8rem; }
}

.post-full-content h2 { margin: 0.5em 0px 0.2em; font-size: 3.6rem; font-we=
ight: 700; }

@media (max-width: 500px) {
  .post-full-content h2 { font-size: 2.6rem; }
}

.post-full-content h3 { margin: 0.5em 0px 0.2em; font-size: 2.8rem; font-we=
ight: 700; }

@media (max-width: 500px) {
  .post-full-content h3 { font-size: 2.2rem; }
}

.post-full-content h4 { margin: 0.5em 0px 0.2em; font-size: 2.8rem; font-we=
ight: 700; }

@media (max-width: 500px) {
  .post-full-content h4 { font-size: 2.2rem; }
}

.post-full-content h5 { display: block; margin: 0.5em 0px; padding: 1em 0px=
 1.5em; border: 0px; color: rgb(62, 176, 239); font-family: Georgia, serif;=
 font-size: 3.2rem; line-height: 1.35em; text-align: center; }

@media (min-width: 1180px) {
  .post-full-content h5 { max-width: 1060px; width: 100vw; }
}

@media (max-width: 500px) {
  .post-full-content h5 { padding: 0px 0px 0.5em; font-size: 2.2rem; }
}

.post-full-content h6 { margin: 0.5em 0px 0.2em; font-size: 2.3rem; font-we=
ight: 700; }

@media (max-width: 500px) {
  .post-full-content h6 { font-size: 2rem; }
}

.footnotes-sep { margin-bottom: 30px; }

.footnotes { font-size: 1.5rem; }

.footnotes p { margin: 0px; }

.footnote-backref { font-size: 1.2rem; font-weight: 700; color: rgb(62, 176=
, 239) !important; text-decoration: none !important; box-shadow: none !impo=
rtant; }

@media (max-width: 500px) {
  .post-full-meta { font-size: 1.2rem; line-height: 1.3em; }
  .post-full-title { font-size: 2.9rem; }
  .post-full-image { margin-bottom: 4vw; height: 350px; }
  .post-full-content { padding: 0px; }
  .post-full-content::after, .post-full-content::before { display: none; }
}

.post-full-content table { display: inline-block; overflow-x: auto; margin:=
 0.5em 0px 2.5em; max-width: 100%; width: auto; border-spacing: 0px; border=
-collapse: collapse; font-family: -apple-system, BlinkMacSystemFont, "Segoe=
 UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", san=
s-serif; font-size: 1.6rem; white-space: nowrap; vertical-align: top; backg=
round: radial-gradient(at left center, rgba(0, 0, 0, 0.2) 0px, transparent =
75%) 0px center / 10px 100% no-repeat scroll, radial-gradient(at right cent=
er, rgba(0, 0, 0, 0.2) 0px, transparent 75%) 100% center / 10px 100% scroll=
; }

.post-full-content table td:first-child { background-image: linear-gradient=
(90deg, rgb(255, 255, 255) 50%, rgba(255, 255, 255, 0)); background-size: 2=
0px 100%; background-repeat: no-repeat; }

.post-full-content table td:last-child { background-image: linear-gradient(=
270deg, rgb(255, 255, 255) 50%, rgba(255, 255, 255, 0)); background-positio=
n: 100% 0px; background-size: 20px 100%; background-repeat: no-repeat; }

.post-full-content table th { color: rgb(21, 23, 26); font-size: 1.2rem; fo=
nt-weight: 700; letter-spacing: 0.2px; text-align: left; text-transform: up=
percase; background-color: rgb(244, 248, 251); }

.post-full-content table td, .post-full-content table th { padding: 6px 12p=
x; border: 1px solid rgb(227, 236, 243); }

.subscribe-form { margin: 1.5em 0px; padding: 6.5vw 7vw 7vw; border: 1px so=
lid rgb(237, 244, 248); text-align: center; background: rgb(244, 248, 251);=
 border-radius: 7px; }

.subscribe-form-title { margin: 0px 0px 3px; padding: 0px; color: rgb(21, 2=
3, 26); font-size: 3.5rem; line-height: 1; font-weight: 700; }

.subscribe-form p { margin-bottom: 1em; color: rgb(115, 138, 148); font-siz=
e: 2.2rem; line-height: 1.55em; letter-spacing: 0.2px; }

.subscribe-form form { display: flex; justify-content: center; align-items:=
 center; margin: 0px auto; max-width: 420px; }

.subscribe-form .form-group { flex-grow: 1; }

.subscribe-email { display: block; padding: 10px; width: 100%; border: 1px =
solid rgb(218, 226, 231); color: rgb(115, 138, 148); font-size: 1.8rem; lin=
e-height: 1em; font-weight: 400; user-select: text; border-radius: 5px; tra=
nsition: border-color 0.15s linear 0s; -webkit-appearance: none; }

.subscribe-form button { display: inline-block; margin: 0px 0px 0px 10px; p=
adding: 0px 20px; height: 41px; outline: none; color: rgb(255, 255, 255); f=
ont-size: 1.5rem; line-height: 37px; font-weight: 400; text-align: center; =
text-shadow: rgba(0, 0, 0, 0.1) 0px -1px 0px; background: linear-gradient(r=
gb(79, 183, 240), rgb(41, 160, 224) 60%, rgb(41, 160, 224) 90%, rgb(54, 166=
, 226)); border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.14) 0px 0px 0px 1p=
x inset; -webkit-font-smoothing: subpixel-antialiased; }

.subscribe-form button:active, .subscribe-form button:focus { background: r=
gb(32, 156, 223); }

@media (max-width: 650px) {
  .subscribe-form-title { font-size: 2.4rem; }
  .subscribe-form p { font-size: 1.6rem; }
}

@media (max-width: 500px) {
  .subscribe-form form { flex-direction: column; }
  .subscribe-form .form-group { width: 100%; }
  .subscribe-form button { margin: 10px 0px 0px; width: 100%; }
}

.post-full-footer { justify-content: space-between; margin: 0px auto; paddi=
ng: 3vw 0px 6vw; max-width: 840px; }

.author-card, .post-full-footer { display: flex; align-items: center; }

.author-card .author-profile-image { margin-right: 15px; width: 60px; heigh=
t: 60px; }

.author-card-name { margin: 0px 0px 2px; padding: 0px; font-size: 2rem; }

.author-card-name a { color: rgb(21, 23, 26); font-weight: 700; }

.author-card-name a:hover { text-decoration: none; }

.author-card-content p { margin: 0px; color: rgb(115, 138, 148); line-heigh=
t: 1.3em; }

.post-full-footer-right { flex-shrink: 0; margin-left: 20px; }

.author-card-button { display: block; padding: 9px 16px; border: 1px solid =
rgb(174, 187, 193); color: rgb(115, 138, 148); font-size: 1.2rem; line-heig=
ht: 1; font-weight: 500; border-radius: 20px; transition: all 0.2s ease 0s;=
 }

.author-card-button:hover { border-color: rgb(62, 176, 239); color: rgb(62,=
 176, 239); text-decoration: none; }

.post-full-comments { margin: 0px auto; max-width: 840px; }

.read-next-feed { flex-wrap: wrap; margin: 0px -20px; padding: 40px 0px 0px=
; }

.read-next-card, .read-next-feed { display: flex; }

.read-next-card { position: relative; flex: 1 1 300px; flex-direction: colu=
mn; overflow: hidden; margin: 0px 20px 40px; padding: 25px; color: rgb(255,=
 255, 255); background: 50% center / cover rgb(21, 23, 26); border-radius: =
5px; box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.0=
3) 1px 3px 8px; }

.read-next-card::before { content: ""; position: absolute; top: 0px; right:=
 0px; bottom: 0px; left: 0px; display: block; background: linear-gradient(1=
35deg, rgba(0, 40, 60, 0.8), rgba(0, 20, 40, 0.7)); border-radius: 5px; bac=
kdrop-filter: blur(2px); }

.read-next-card-header { position: relative; z-index: 50; padding-top: 20px=
; text-align: center; }

.read-next-card-header-sitetitle { display: block; font-size: 1.3rem; line-=
height: 1.3em; opacity: 0.8; }

.read-next-card-header-title { margin: 0px; padding: 0px 20px; color: rgb(2=
55, 255, 255); font-size: 3rem; line-height: 1.2em; letter-spacing: 1px; }

.read-next-card-header-title a { color: rgb(255, 255, 255); font-weight: 30=
0; text-decoration: none; }

.read-next-card-header-title a:hover { text-decoration: none; }

.read-next-divider { position: relative; display: flex; justify-content: ce=
nter; height: 80px; }

.read-next-divider svg { width: 40px; fill: transparent; stroke: rgb(255, 2=
55, 255); stroke-width: 0.5px; stroke-opacity: 0.65; }

.read-next-card-content { position: relative; z-index: 50; flex-grow: 1; di=
splay: flex; font-size: 1.7rem; }

.read-next-card-content ul { display: flex; flex-direction: column; margin:=
 0px auto; padding: 0px; text-align: center; list-style: none; }

.read-next-card-content li { margin: 0px; padding: 0px; font-size: 1.6rem; =
line-height: 1.25em; font-weight: 200; letter-spacing: -0.5px; }

.read-next-card-content li a { display: block; padding: 20px 0px; border-bo=
ttom: 1px solid rgba(255, 255, 255, 0.3); color: rgb(255, 255, 255); font-w=
eight: 500; vertical-align: top; transition: opacity 0.3s ease 0s; }

.read-next-card-content li:first-of-type a { padding-top: 10px; }

.read-next-card-content li a:hover { opacity: 1; }

.read-next-card-footer { position: relative; margin: 15px 0px 3px; text-ali=
gn: center; }

.read-next-card-footer a { color: rgb(255, 255, 255); }

.floating-header { visibility: hidden; position: fixed; top: 0px; right: 0p=
x; left: 0px; z-index: 1000; display: flex; align-items: center; height: 60=
px; border-bottom: 1px solid rgba(0, 0, 0, 0.06); background: rgba(255, 255=
, 255, 0.95); transition: all 0.5s cubic-bezier(0.19, 1, 0.22, 1) 0s; trans=
form: translate3d(0px, -120%, 0px); }

.floating-active { visibility: visible; transition: all 0.5s cubic-bezier(0=
.22, 1, 0.27, 1) 0s; transform: translateZ(0px); }

.floating-header-logo { overflow: hidden; margin: 0px 0px 0px 20px; font-si=
ze: 1.6rem; line-height: 1em; letter-spacing: -1px; text-overflow: ellipsis=
; white-space: nowrap; }

.floating-header-logo a { display: flex; align-items: center; color: rgb(21=
, 23, 26); line-height: 1.1em; font-weight: 700; }

.floating-header-logo a:hover { text-decoration: none; }

.floating-header-logo img { margin: 0px 10px 0px 0px; max-height: 20px; }

.floating-header-divider { margin: 0px 5px; line-height: 1em; }

.floating-header-title { flex: 1 1 0%; overflow: hidden; margin: 0px; color=
: rgb(46, 46, 46); font-size: 1.6rem; line-height: 1.3em; font-weight: 700;=
 text-overflow: ellipsis; white-space: nowrap; }

.floating-header-share { justify-content: flex-end; padding-left: 2%; font-=
size: 1.3rem; line-height: 1; }

.floating-header-share, .floating-header-share a { display: flex; align-ite=
ms: center; }

.floating-header-share a { justify-content: center; }

.floating-header-share svg { width: auto; height: 16px; fill: rgb(255, 255,=
 255); }

.floating-header-share-label { flex-shrink: 0; display: flex; align-items: =
center; margin-right: 10px; color: rgba(0, 0, 0, 0.7); font-weight: 500; }

.floating-header-share-label svg { margin: 0px 5px 0px 10px; width: 18px; h=
eight: 18px; stroke: rgba(0, 0, 0, 0.7); transform: rotate(90deg); }

.floating-header-share-fb, .floating-header-share-tw { display: block; alig=
n-items: center; width: 60px; height: 60px; color: rgb(255, 255, 255); line=
-height: 48px; text-align: center; transition: all 0.5s cubic-bezier(0.19, =
1, 0.22, 1) 0s; }

.floating-header-share-tw { background: rgb(51, 177, 255); }

.floating-header-share-fb { background: rgb(0, 94, 153); }

.progress { position: absolute; right: 0px; bottom: -1px; left: 0px; width:=
 100%; height: 2px; border: none; color: rgb(62, 176, 239); background: tra=
nsparent; -webkit-appearance: none; }

.progress::-webkit-progress-bar { background-color: transparent; }

.progress::-webkit-progress-value { background-color: rgb(62, 176, 239); }

.progress-container { position: absolute; top: 0px; left: 0px; display: blo=
ck; width: 100%; height: 2px; background-color: transparent; }

.progress-bar { display: block; width: 50%; height: inherit; background-col=
or: rgb(62, 176, 239); }

@media (max-width: 900px) {
  .floating-header { height: 40px; }
  .floating-header-logo, .floating-header-title { font-size: 1.5rem; }
  .floating-header-share-fb, .floating-header-share-tw { width: 40px; heigh=
t: 40px; line-height: 38px; }
}

@media (max-width: 800px) {
  .floating-header-logo { margin-left: 10px; }
  .floating-header-logo a { color: rgb(46, 46, 46); }
  .floating-header-divider, .floating-header-title { visibility: hidden; }
}

@media (max-width: 450px) {
  .floating-header-share-label { display: none; }
}

.site-header-content .author-profile-image { z-index: 10; flex-shrink: 0; m=
argin: 0px 0px 20px; width: 100px; height: 100px; box-shadow: rgba(255, 255=
, 255, 0.1) 0px 0px 0px 6px; }

.site-header-content .author-bio { z-index: 10; flex-shrink: 0; margin: 5px=
 0px 10px; max-width: 600px; font-size: 2rem; line-height: 1.3em; font-weig=
ht: 300; letter-spacing: 0.5px; opacity: 0.8; }

.site-header-content .author-meta { z-index: 10; flex-shrink: 0; display: f=
lex; justify-content: center; align-items: center; margin: 0px 0px 10px; fo=
nt-family: Georgia, serif; font-style: italic; }

.site-header-content .author-location svg { height: 1.9rem; stroke: rgb(255=
, 255, 255); }

.site-header-content .bull { display: inline-block; margin: 0px 12px; opaci=
ty: 0.5; }

.site-header-content .social-link:first-of-type { padding-left: 4px; }

@media (max-width: 500px) {
  .site-header-content .author-bio { font-size: 1.8rem; line-height: 1.15em=
; letter-spacing: 0px; }
  .author-location, .author-stats { display: none; }
}

.error-template .site-main { padding: 7vw 4vw; }

.site-nav-center { display: flex; justify-content: center; align-items: cen=
ter; text-align: center; }

.site-nav-center .site-nav-logo { margin-right: 0px; }

.error-message { text-align: center; }

.error-code { margin: 0px; font-size: 12vw; line-height: 1em; letter-spacin=
g: -5px; opacity: 0.3; }

.error-description { margin: 0px; color: rgb(115, 138, 148); font-size: 3re=
m; line-height: 1.3em; font-weight: 400; }

@media (max-width: 800px) {
  .error-description { margin: 5px 0px 0px; font-size: 1.8rem; }
}

.error-link { display: inline-block; margin-top: 5px; }

.error-template .post-feed { padding-top: 0px; }

.subscribe-overlay { position: fixed; top: 0px; right: 0px; bottom: 0px; le=
ft: 0px; z-index: 9000; display: flex; justify-content: center; align-items=
: center; background: rgba(0, 25, 40, 0.97); opacity: 0; transition: opacit=
y 0.2s ease-in 0s; pointer-events: none; backdrop-filter: blur(3px); }

.subscribe-overlay:target { opacity: 1; pointer-events: auto; }

.subscribe-overlay-content { position: relative; z-index: 9999; margin: 0px=
 0px 5vw; padding: 4vw; color: rgb(255, 255, 255); text-align: center; }

.subscribe-overlay-logo { position: fixed; top: 23px; left: 30px; height: 3=
0px; }

.subscribe-overlay-title { display: inline-block; margin: 0px 0px 10px; fon=
t-size: 6rem; line-height: 1.15em; }

.subscribe-overlay-description { margin: 0px auto 50px; max-width: 650px; f=
ont-family: Georgia, serif; font-size: 3rem; line-height: 1.3em; font-weigh=
t: 300; opacity: 0.8; }

.subscribe-overlay form { display: flex; justify-content: center; align-ite=
ms: center; margin: 0px auto; max-width: 500px; }

.subscribe-overlay .form-group { flex-grow: 1; }

.subscribe-overlay .subscribe-email { display: block; padding: 14px 20px; w=
idth: 100%; border: none; color: rgb(115, 138, 148); font-size: 2rem; line-=
height: 1em; font-weight: 400; letter-spacing: 0.5px; user-select: text; bo=
rder-radius: 8px; transition: border-color 0.15s linear 0s; -webkit-appeara=
nce: none; }

.subscribe-email:focus { outline: 0px; border-color: rgb(190, 205, 213); }

.subscribe-overlay button { display: inline-block; margin: 0px 0px 0px 15px=
; padding: 0px 25px; height: 52px; outline: none; color: rgb(255, 255, 255)=
; font-size: 1.7rem; line-height: 37px; font-weight: 400; text-align: cente=
r; text-shadow: rgba(0, 0, 0, 0.1) 0px -1px 0px; background: linear-gradien=
t(rgb(79, 183, 240), rgb(41, 160, 224) 60%, rgb(41, 160, 224) 90%, rgb(54, =
166, 226)); border-radius: 8px; box-shadow: rgba(0, 0, 0, 0.14) 0px 0px 0px=
 1px inset; -webkit-font-smoothing: subpixel-antialiased; }

.subscribe-overlay button:active, .subscribe-overlay button:focus { backgro=
und: rgb(32, 156, 223); }

.subscribe-overlay-close { position: absolute; top: 0px; right: 0px; bottom=
: 0px; left: 0px; display: block; }

.subscribe-overlay-close::before { transform: rotate(45deg); }

.subscribe-overlay-close::after, .subscribe-overlay-close::before { content=
: ""; position: absolute; top: 40px; right: 25px; display: block; width: 30=
px; height: 2px; background: rgb(255, 255, 255); opacity: 0.8; }

.subscribe-overlay-close::after { transform: rotate(-45deg); }

.subscribe-overlay-close:hover { cursor: default; }

.site-footer { position: relative; padding-top: 20px; padding-bottom: 60px;=
 color: rgb(255, 255, 255); background: rgb(0, 0, 0); }

.site-footer-content { display: flex; flex-wrap: wrap; justify-content: spa=
ce-between; align-items: center; font-size: 1.3rem; }

.site-footer-content, .site-footer-content a { color: rgba(255, 255, 255, 0=
.7); }

.site-footer-content a:hover { color: rgb(255, 255, 255); text-decoration: =
none; }

.site-footer-nav { display: flex; }

.site-footer-nav a { position: relative; margin-left: 20px; }

.site-footer-nav a::before { content: ""; position: absolute; top: 11px; le=
ft: -11px; display: block; width: 2px; height: 2px; background: rgb(255, 25=
5, 255); border-radius: 100%; }

.site-footer-nav a:first-of-type::before { display: none; }

@media (max-width: 650px) {
  .site-footer-content { flex-direction: column; }
  .site-footer-nav a:first-child { margin-left: 0px; }
}

.pagination { position: relative; width: 100%; max-width: 100%; margin: 1re=
m auto; font-size: 1.3rem; color: rgb(158, 171, 179); text-align: center; }

.pagination a { color: rgb(158, 171, 179); transition: all 0.2s ease 0s; }

.page-number { display: inline-block; padding: 2px 0px; min-width: 100px; }

.newer-posts, .older-posts { position: absolute; display: inline-block; pad=
ding: 0px 15px; border: 1px dashed rgb(221, 221, 221); text-decoration: non=
e; transition: border 0.3s ease 0s; }

.newer-posts { left: 0px; }

.older-posts { right: 0px; }

.site-footer { padding-bottom: 20px !important; }

.nav-current a:visited { color: rgb(255, 255, 0); }

@media (min-width: 900px) {
  .ctsingle .post-feed { margin-top: -70px; padding-top: 0px; }
  .ctsingle .site-nav { position: relative; top: -70px; }
}

@media (min-width: 795px) {
  .ctsingle .post-feed p { font-size: 1.8rem; line-height: 1.55em; }
}

@media (max-width: 650px) {
  .hide { display: none !important; }
  .copyright { text-align: center; }
}

.post-full-content pre code { color: rgb(229, 239, 245); }
------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-f9628386-6ea5-4e31-b10e-4f822023a42b@mhtml.blink

@charset "utf-8";

.button { display: inline-block; margin: 0px 0px 0px 10px; padding: 0px 20p=
x; height: 41px; outline: none; color: rgb(255, 255, 255); font-size: 1.5re=
m; line-height: 37px; font-weight: 400; text-align: center; text-shadow: rg=
ba(0, 0, 0, 0.1) 0px -1px 0px; background: linear-gradient(rgb(79, 183, 240=
), rgb(41, 160, 224) 60%, rgb(41, 160, 224) 90%, rgb(54, 166, 226)); border=
-radius: 5px; box-shadow: rgba(0, 0, 0, 0.14) 0px 0px 0px 1px inset; -webki=
t-font-smoothing: subpixel-antialiased; }

@media (max-width: 500px) {
  .button { margin: 10px 0px 0px; width: 100%; }
}

.placeholder-text { display: inline-block; width: 100%; }

.site-title { font-weight: 200; font-size: 8rem; }

.site-header::before { background: rgba(0, 0, 0, 0.5); }

.site-wrapper { min-height: auto; }

.highlight { width: 100%; }

.post-full-content h3 { margin-bottom: 1em; }

#TableOfContents > ul { list-style: none; margin: 0px; padding: 0px; }

.post-template .kg-card-markdown:not(:first-child) > p:first-child { font-s=
ize: inherit; line-height: inherit; }

.post-full-content p { word-break: break-word; }

.post-card-meta { display: flex; justify-content: space-between; align-item=
s: flex-end; padding: 0px 25px 25px; }

.author-list { display: flex; flex-wrap: wrap-reverse; margin: 0px; padding=
: 0px; list-style: none; }

.author-list-item { position: relative; flex-shrink: 0; margin: 0px; paddin=
g: 0px; }

.author-list-item:nth-child(1) { z-index: 10; }

.author-list-item:nth-child(2) { z-index: 9; }

.author-list-item:nth-child(3) { z-index: 8; }

.author-list-item:nth-child(4) { z-index: 7; }

.author-list-item:nth-child(5) { z-index: 6; }

.author-list-item:nth-child(6) { z-index: 5; }

.author-list-item:nth-child(7) { z-index: 4; }

.author-list-item:nth-child(8) { z-index: 3; }

.author-list-item:nth-child(9) { z-index: 2; }

.author-list-item:nth-child(10) { z-index: 1; }

.static-avatar { display: block; overflow: hidden; margin: 0px -5px; width:=
 34px; height: 34px; border: 2px solid rgb(255, 255, 255); border-radius: 1=
00%; }

.author-name-tooltip { position: absolute; bottom: 105%; z-index: 999; disp=
lay: block; padding: 2px 8px; color: rgb(255, 255, 255); font-size: 1.2rem;=
 letter-spacing: 0.2px; white-space: nowrap; background: rgb(21, 23, 26); b=
order-radius: 3px; box-shadow: rgba(39, 44, 49, 0.08) 0px 12px 26px, rgba(3=
9, 44, 49, 0.03) 1px 3px 8px; opacity: 0; transition: all 0.3s cubic-bezier=
(0.4, 0.01, 0.165, 0.99) 0s; transform: translateY(6px); pointer-events: no=
ne; }

.author-list-item:hover .author-name-tooltip { opacity: 1; transform: trans=
lateY(0px); }

@media (max-width: 650px) {
  .author-name-tooltip { display: none; }
}

.reading-time { flex-shrink: 0; margin-left: 20px; color: rgb(115, 138, 148=
); font-size: 1.2rem; line-height: 33px; font-weight: 500; letter-spacing: =
0.5px; text-transform: uppercase; }

@media (min-width: 795px) {
  .home-template .post-feed .post-card:nth-child(6n+1):not(.no-image) { fle=
x: 1 1 calc(100% - 300px); }
}

.carbon-wrapper { display: flex; justify-content: center; align-items: flex=
-start; }

#carbonads { display: block; overflow: hidden; font-family: -apple-system, =
BlinkMacSystemFont, "segoe ui", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "he=
lvetica neue", sans-serif; padding: 1em; background: rgb(255, 255, 255); te=
xt-align: center; line-height: 1.5; font-size: 14px; max-width: 158px; }

#carbonads a { color: inherit; text-decoration: none; }

#carbonads a:hover { color: inherit; }

#carbonads span { display: block; overflow: hidden; }

.carbon-img { display: block; margin: 0px auto 8px; line-height: 1; }

.carbon-text { display: block; margin-bottom: 8px; }

.carbon-poweredby { text-transform: uppercase; display: block; font-size: 1=
0px; letter-spacing: 1px; line-height: 1; }

.chroma { color: rgb(248, 248, 242); background-color: rgb(39, 40, 34); }

.chroma .err { color: rgb(150, 0, 80); background-color: rgb(30, 0, 16); }

.chroma .lntd { vertical-align: top; padding: 0px; margin: 0px; border: 0px=
; }

.chroma .lntable { border-spacing: 0px; padding: 0px; margin: 0px; border: =
0px; width: 100%; overflow: auto; display: block; }

.chroma .hl { display: block; width: 100%; background-color: rgb(255, 255, =
204); }

.chroma .lnt { margin-right: 0.4em; padding: 0px 0.4em; display: block; }

.chroma .ln { margin-right: 0.4em; padding: 0px 0.4em; }

.chroma .k { color: rgb(102, 217, 239); }

.chroma .kc { color: rgb(102, 217, 239); }

.chroma .kd { color: rgb(102, 217, 239); }

.chroma .kn { color: rgb(249, 38, 114); }

.chroma .kp { color: rgb(102, 217, 239); }

.chroma .kr { color: rgb(102, 217, 239); }

.chroma .kt { color: rgb(102, 217, 239); }

.chroma .na { color: rgb(166, 226, 46); }

.chroma .nc { color: rgb(166, 226, 46); }

.chroma .no { color: rgb(102, 217, 239); }

.chroma .nd { color: rgb(166, 226, 46); }

.chroma .ne { color: rgb(166, 226, 46); }

.chroma .nf { color: rgb(166, 226, 46); }

.chroma .nx { color: rgb(166, 226, 46); }

.chroma .nt { color: rgb(249, 38, 114); }

.chroma .l { color: rgb(174, 129, 255); }

.chroma .ld { color: rgb(230, 219, 116); }

.chroma .s { color: rgb(230, 219, 116); }

.chroma .sa { color: rgb(230, 219, 116); }

.chroma .sb { color: rgb(230, 219, 116); }

.chroma .sc { color: rgb(230, 219, 116); }

.chroma .dl { color: rgb(230, 219, 116); }

.chroma .sd { color: rgb(230, 219, 116); }

.chroma .s2 { color: rgb(230, 219, 116); }

.chroma .se { color: rgb(174, 129, 255); }

.chroma .sh { color: rgb(230, 219, 116); }

.chroma .si { color: rgb(230, 219, 116); }

.chroma .sx { color: rgb(230, 219, 116); }

.chroma .sr { color: rgb(230, 219, 116); }

.chroma .s1 { color: rgb(230, 219, 116); }

.chroma .ss { color: rgb(230, 219, 116); }

.chroma .m { color: rgb(174, 129, 255); }

.chroma .mb { color: rgb(174, 129, 255); }

.chroma .mf { color: rgb(174, 129, 255); }

.chroma .mh { color: rgb(174, 129, 255); }

.chroma .mi { color: rgb(174, 129, 255); }

.chroma .il { color: rgb(174, 129, 255); }

.chroma .mo { color: rgb(174, 129, 255); }

.chroma .o { color: rgb(249, 38, 114); }

.chroma .ow { color: rgb(249, 38, 114); }

.chroma .c { color: rgb(117, 113, 94); }

.chroma .ch { color: rgb(117, 113, 94); }

.chroma .cm { color: rgb(117, 113, 94); }

.chroma .c1 { color: rgb(117, 113, 94); }

.chroma .cs { color: rgb(117, 113, 94); }

.chroma .cp { color: rgb(117, 113, 94); }

.chroma .cpf { color: rgb(117, 113, 94); }

.chroma .gd { color: rgb(249, 38, 114); }

.chroma .ge { font-style: italic; }

.chroma .gi { color: rgb(166, 226, 46); }

.chroma .gs { font-weight: 700; }

.chroma .gu { color: rgb(117, 113, 94); }

.hero-container { position: relative; }

.triplebyte-cta { max-width: 1040px; text-align: center; }

.cf-wrapper { max-width: 330px; padding: 15px; font-size: 14px; line-height=
: 1.4; text-align: center; font-family: system, "helvetica neue", Helvetica=
, Arial; margin-left: auto; margin-right: auto; display: block !important; =
}

.cf-header { font-size: 12px; color: rgb(102, 119, 136); display: block; ma=
rgin-bottom: 8px; }

.cf-header::before { content: "=E2=80=94"; margin: 0px 0.5em; opacity: 0.5;=
 }

.cf-header::after { content: "=E2=80=94"; margin: 0px 0.5em; opacity: 0.5; =
}

.cf-text, .cf-text:hover { text-decoration: none; color: rgb(51, 51, 51) !i=
mportant; box-shadow: none !important; }

.cf-powered-by { margin-top: 5px; font-size: 11px; display: block; color: r=
gb(102, 119, 136); text-decoration: none; text-align: center; box-shadow: n=
one !important; }

.hero-cta { margin: 1.5em 0px; padding: 6.5vw 7vw 7vw; border: 1px solid rg=
b(237, 244, 248); text-align: center; background: rgba(244, 248, 251, 0.9);=
 border-radius: 7px; position: absolute; top: 50%; left: 50%; transform: tr=
anslate(-50%, -60%); width: 100%; }

@media (min-width: 650px) {
  .hero-cta { padding-top: 100px; padding-bottom: 100px; transform: transla=
te(-50%, -75%); }
}

.cta-title { margin: 0px 0px 3px; padding: 0px; color: rgb(21, 23, 26); fon=
t-size: 3.5rem; line-height: 1; font-weight: 700; }

@media (max-width: 650px) {
  .cta-title { font-size: 2.4rem; }
}

.cta-text { margin-top: 0.75em; margin-bottom: 1em; color: rgb(92, 112, 120=
); font-size: 2.2rem; line-height: 1.55em; letter-spacing: 0.2px; }

@media (max-width: 650px) {
  .cta-text { font-size: 1.6rem; }
}

.overlay-cta { position: fixed; bottom: 0px; left: 0px; z-index: 99999; bor=
der: 1px solid rgb(237, 244, 248); background: rgb(255, 255, 255); width: 1=
00%; padding: 1em 4em; visibility: visible; transition: all 0.5s cubic-bezi=
er(0.22, 1, 0.27, 1) 0s; transform: translateY(0px); flex-wrap: wrap; }

@media (max-width: 500px) {
  .overlay-cta { padding: 1em; background: rgba(255, 255, 255, 0.95); }
}

.overlay-cta--hidden { visibility: hidden; transition: all 0.5s cubic-bezie=
r(0.19, 1, 0.22, 1) 0s; transform: translate3d(0px, 120%, 0px); }

.overlay-cta--closed { transition: all 0.5s cubic-bezier(0.19, 1, 0.22, 1) =
0s; transform: translate3d(0px, 120%, 0px); visibility: hidden !important; =
}

.overlay-cta__inner { position: relative; max-width: 1040px; display: flex;=
 flex-direction: row; justify-content: space-between; align-items: center; =
margin: auto; }

@media (max-width: 500px) {
  .overlay-cta__inner { flex-wrap: wrap; }
}

@media (max-width: 500px) {
  .overlay-cta__text-container { text-align: center; flex: 0 0 100%; }
}

.overlay-cta__title { font-size: 1.6rem; }

.overlay-cta__text { font-size: 1.6rem; margin: 0px; }

@media (max-width: 500px) {
  .overlay-cta__text { font-size: 1.2rem; }
}

.overlay-cta__button-container { text-align: center; flex-direction: column=
; }

@media (max-width: 500px) {
  .overlay-cta__button-container { width: 100%; }
}

.overlay-cta__button { min-width: 150px; }

@media (max-width: 500px) {
  .overlay-cta__button { width: 100%; }
}

.overlay-cta__close { font-size: 0.9em; }
------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-918ab7de-a90a-48de-8e69-e049cd42e794@mhtml.blink

@charset "utf-8";

.fluid-width-video-container { flex-grow: 1; width: 100%; }

.fluid-width-video-wrapper { width: 100%; position: relative; padding: 0px;=
 }

.fluid-width-video-wrapper iframe, .fluid-width-video-wrapper object, .flui=
d-width-video-wrapper embed { position: absolute; top: 0px; left: 0px; widt=
h: 100%; height: 100%; }
------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-6fa6b7a1-5da3-4600-9e86-c0089586c902@mhtml.blink

@charset "utf-8";

#cf .cf-header::before { content: " "; margin: 0px 0.5em; opacity: 0.5; }

#cf .cf-header::after { content: " "; margin: 0px 0.5em; opacity: 0.5; }
------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://codefund.io/display/c9e95244-2f55-4b6b-9ef4-9b01c206285f.gif

R0lGODdhAQABAJEAAAAAAP///wAAAAAAACH5BAkAAAIALAAAAAABAAEAAAICVAEAOw==

------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://codewithhugo.com/express-request-response-mocking/chris-barbalis-unsplash_huda5eb9ff69e1b9edda476b01900fef98_108104_0x800_resize_q60_box.jpg

/9j/2wCEAA0JCgsKCA0LCgsODg0PEyAVExISEyccHhcgLikxMC4pLSwzOko+MzZGNywtQFdBRkxO
UlNSMj5aYVpQYEpRUk8BDg4OExETJhUVJk81LTVPT09PT09PT09PT09PT09PT09PT09PT09PT09P
T09PT09PT09PT09PT09PT09PT09PT//AABEIAyAEtAMBIgACEQEDEQH/xAGiAAABBQEBAQEBAQAA
AAAAAAAAAQIDBAUGBwgJCgsQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGh
CCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hp
anN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV
1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+gEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLEQAC
AQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXx
FxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqS
k5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T1
9vf4+fr/2gAMAwEAAhEDEQA/AJtdsJ794REvypkkk4qlF4el43yKPpXS0HqPrSTsh2MVPDcPHmSs
fpTn8P2i4MckgYDHrW2OlRP980XYGA2k3tuS1rOrDOcY/wAaixqdvGFktg6Kc5H09vpXRUyXiJqf
OyHBM5v+0MELPHImCd2OpBpl3c27xhYX3HPBYncB2rfkRJMh1Vh7iqsml2Uh5hx9CafOT7JdBnh9
cWbe7/0Fa/eqdrbpaReXCTt3bsHtVkSDPIqW7u5oSdqkqHzEAGWxyKcZk/vVIzlfFDZ1PH92NRWM
a0dfkEuqSlTnGF/IVnGrjsMO3SnDoKQ8D8KU9MVTAVvu00dBTn6U30FMRJ3T604oxdSFJGc9K19H
tY5o5GkUHaQB+Vaq2cK9FquQ5pVUmYdjE6zxMyMAOpxWnEQsuT03DtV5beIfwCpFjQdFAo5EZurc
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

------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://codewithhugo.com/img/hugo_small.jpeg

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
/wDdIxrgAYZI1vhDX//Z

------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://codewithhugo.com/img/cover.jpg

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
WVdW6qN75eXsTXo9rl9Xo+r3Hbm/Z7PJ3uVydvl5dcvJvk1yNN2ckOLHj9f1vT7M1y1eRDVss0jN
8z8++H+X+wx4nx32/v8Ae87sfpn2VWUhVhKayLEpLOt8T6XxP4Z8f9X+uer3eX7L6Tesms6ZoiJn
OVrWlAlkjWbJnwPw3854cgyiEgMkIgEGUdXZyRdcyckc3NeLl5+/z93q9rk4/W7nX7XH3O538evw
59DfY5dc3Z3vWOe6bUxni6fW32+9zc2muWybt1EjGePGscPFNcvY8r53vfUcvUxycvLrW98mpVay
BrImcZzMZTgx298XJyckznHHeVa3u22oSYzcjdqazQSpAznwvyb8z8XjgZqMxAIiAMiQ7LdNXmzy
3i5ms83Y37HFOTkmvT7/ABuzyc3pO7eTm7k5+TfJyuXHLrW5rU0xwzj6s5ex2uTXNy1daYxiXda1
yWVsqTQLHFjC8m97KESZxjjvJybtWFhQNZlzJxzTkKmclNW0IgIJkTPmfGfnfw/h8YyyRJQmSAIJ
D1ba03dck5L3Mtcve50c3N3uW8m+bs93i7nNd83bvJza3vVvLqbb0wicXHje2uxvXJus8fHx8nZ5
tbulK0BahoZzx8eXJvetLEYzx4nJyctUirJVgssExiQtA01bQCZFgCGOn4/xnwHx3icURMksCIgN
ZQh9Hq28l1yavJrk7Gs67HO5ObXL2ubk1rk12Oe9nkvLy8m9815Nt3W5bq5FxIpda5NaTi4+LXb7
PNvVqroKLGikymMYXet2mJnPG3verNMm0zqgUiZsxMxapo1ZsAmQWABOLqef4vyfxHyfideZiWAS
sCywhl95d703yN73yb3bz8t1yb5ubbe+XXPy8vJy3l5N7cmuTVu7dlqLSahpd3ROPE5efl5db0rS
lFTSgSSYIumiTOTV2sNFJQKQmbMshoaVVAIZ1koQCODrdTzfE+W+Q+U8bqZAJWYAgyn6rrd3re2t
cm928u961vk5Ldb3y75OXk1vXLybXW9aurbpSqVTRu60GJdcvLvdq1oos0oAkYA0JILqpooSqQpB
MiBQ0pKAEsZBUAmOHg6vQ8zw/mvlvm/J6XGIphBYDMftO9273d3Wt273pyXXJq7uuXfJrk1re+TW
11q7ttqlqi6W262UWXW97tt0pSpqgARECiAGlAKABCEIqigAAEGRSBmY4eDg6fn+Z4/z3zXznldL
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

------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://codewithhugo.com/pass-cookies-axios-fetch-requests/alex-unsplash_huc118a935d8013616420a3353ab43826e_114600_0x300_resize_q60_box.jpg

/9j/2wCEAA0JCgsKCA0LCgsODg0PEyAVExISEyccHhcgLikxMC4pLSwzOko+MzZGNywtQFdBRkxO
UlNSMj5aYVpQYEpRUk8BDg4OExETJhUVJk81LTVPT09PT09PT09PT09PT09PT09PT09PT09PT09P
T09PT09PT09PT09PT09PT09PT09PT//AABEIASwBlwMBIgACEQEDEQH/xAGiAAABBQEBAQEBAQAA
AAAAAAAAAQIDBAUGBwgJCgsQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGh
CCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hp
anN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV
1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+gEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLEQAC
AQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXx
FxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqS
k5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T1
9vf4+fr/2gAMAwEAAhEDEQA/AOMJBXpzTto8sN3pAy7Tkc9qE5OD0qzFDi4MYBHzDvUYOKf6g0oQ
bN3FADGOR0p6EHApgYjtmk6mgQ/aN5BNOYFNpbkGmOuwgZyaT5mx1OKBhkM3PAoIBbC8ijbnJ9KV
G29qBCklVI29e9LGoYY6k0Md5VRkeuac0apHuB5+tAyNTtbkdKUjc5UYwKZyOacvyMC3Q0AAUbM0
hXAoBOeDilck4yQTQIdCVB+apLgKApRgc0yVQEUj0pgBGGI4pjHpL8wLDoO1MDL5hJHFPdo2jB6N
9KZsztweTSAUR5QuTToojJwpyfQUjhlwhpzRFEDKaBio5ibaykg8YpCjD5mGFY9aPLcASE5qxLlr
fev3SOR70DtfVFZipPy9qRGxTlKlMd6YtDEiTrznikxyDkc0ZwOBS59aRQnt60dzR7jrRnIyKAE7
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
/9k=

------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://codewithhugo.com/node-configuration-management/filip-gielda-unsplash_huc6ba2a253794871ed1bc569882313321_185234_0x300_resize_q60_box.jpg

/9j/2wCEAA0JCgsKCA0LCgsODg0PEyAVExISEyccHhcgLikxMC4pLSwzOko+MzZGNywtQFdBRkxO
UlNSMj5aYVpQYEpRUk8BDg4OExETJhUVJk81LTVPT09PT09PT09PT09PT09PT09PT09PT09PT09P
T09PT09PT09PT09PT09PT09PT09PT//AABEIASwBwgMBIgACEQEDEQH/xAGiAAABBQEBAQEBAQAA
AAAAAAAAAQIDBAUGBwgJCgsQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGh
CCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hp
anN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV
1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+gEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLEQAC
AQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXx
FxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqS
k5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T1
9vf4+fr/2gAMAwEAAhEDEQA/ANUU8CmgU8Cu44xMUtLijFACUooxRigApaMUYoAKWkpaAClpKXFA
xRS02lFIAIopaKAEpaKKBBSikxSigBaKKKAClFFApDHCnAgUw0c0rBclElOElQClpWHzE+8Ubqgz
ShqLD5ibdRuqLdRuosHMTZ96UN71Duo3GlYOYm30u+q+40bqOUOYsb6UPVbcaUOaXKPmLBc+lJuB
9aiElODqaLD5h2Rnk1IHAHBqLIpcA0rBcnV80pfHWq4yDxTmJpWK5h+4Z5FOJFQbjQOTRYVxzKOx
oUYNGKTB9aYDyAelMIIpQrEZFJk0AJTgKSloAcBxzTsU0EUu6kMXbmmmOng0pYUhkXl+1Hl+1P3C
jcKAsjFAp2KBS10mAYoxRS0hCUUtJTAKKXFGKAEpcUtFACYpaKWkAlLRS4oASilxSgUANpadto20
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
flHX0pMD0H5UDsf/2Q==

------MultipartBoundary--VIFmi7StPVgVxQe2cK4uay7UCTppexcCqjbkzOdR8L------
